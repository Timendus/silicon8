(()=>{var e={364:e=>{e.exports='\0àabc\0¢,óðe@\0*@ÿ""{ðeÑ%s\bars\b*   Welcomeÿ       to Silicon-8!ÿClick the screenÿor drag a *.ch8ÿfile here ^_^\0dBd E¢ððð\0î\0\0\0\0\0\0  \0\0\0PøPøPx p(ð  @ @ @ p\0\0\0@@@@@ ¨p¨ \0@à@\0\0\0\0@\0\0à\0\0\0\0\0\0  @``@À@@àà`ðà`àððàà`à`ð @@````p`\0\0\0\0@\0@ @@ \0à\0à\0@ @À @\0@`°``ðàààppààààààÀp°`ðà@@@àà   À À àØ¨Ðð°``àà`°pààp`àø    ```¨ØP PP   à @àÀÀ@  À@@@À@ \0\0\0\0\0\0\0à@\0\0\0\0`  `À À\0``  ` `\0@ À`@À\0` `ÀÀ  \0@\0@@ À À@@@@\0 à  \0À   \0@  @\0À À\0` ` \0 À\0@@À@\0   @\0  @@\0  à \0 @@ \0  @\0À@À`@@`À@ @À\0P \0\0'},447:e=>{e.exports={AUTO:0,STRICTVIP:1,VIP:2,BLINDVIP:3,SCHIP:4,XOCHIP:5}},497:e=>{const t=document.getElementById("display"),s=t.getContext("2d");e.exports={render:(e,n,a)=>{t.width=e,t.height=n;const r=s.createImageData(e,n);for(let t=0;t<n*e;t++){const e=4*t,s=3*t;r.data[e+0]=a[s+0],r.data[e+1]=a[s+1],r.data[e+2]=a[s+2],r.data[e+3]=255}s.putImageData(r,0,0)}}},755:e=>{const t=new Go;WebAssembly.instantiateStreaming||(WebAssembly.instantiateStreaming=async(e,t)=>{const s=await(await e).arrayBuffer();return await WebAssembly.instantiate(s,t)}),e.exports=class{constructor({playSound:e,stopSound:s,display:n}){e||=()=>{},s||=()=>{},Object.assign(t.importObject.env,{"main.randomByte":()=>255&Math.floor(256*Math.random()),"main.playSound":(t,s,n)=>{s=new Uint8Array(this._cpu.memory.buffer,s,16),e(t,s,n)},"main.stopSound":s,"main.render":(e,t,s)=>{const a=new Uint8Array(this._cpu.memory.buffer,s,e*t*3);n.render(e,t,a)}})}init(){return WebAssembly.instantiateStreaming(fetch("silicon8.wasm"),t.importObject).then((e=>{this._cpu=e.instance.exports,t.run(e.instance),setInterval((()=>this._cpu.clockTick()),1e3/60)})).catch((e=>{console.error(e)}))}setCyclesPerFrame(e){this._cpu.setCyclesPerFrame(e)}loadProgram(e,t){this._cpu.reset(e);const s=new Uint8Array(this._cpu.memory.buffer,this._cpu.ramPtr(),this._cpu.ramSize());for(let e=512;e<512+t.length;e++)s[e]=t[e-512]}dumpStatus(){this._cpu.dumpStatus()}pressKey(e){this._cpu.pressKey(e)}releaseKey(e){this._cpu.releaseKey(e)}}},996:(e,t,s)=>{const n=s(82);e.exports=e=>{const t={};let s=[],a=!1;const r={12:5,14:7,15:9,13:8,0:6,1:4};function o(){if(!a)return;const n=navigator.getGamepads();if(n){for(const a of n)if(a)if(t[a.index]){for(const s in r)a.buttons[s].pressed!=t[a.index][s]&&(a.buttons[s].pressed?e.pressKey(r[s]):e.releaseKey(r[s]));i(a)}else s.includes(a.index)||(console.warn("Got an unannounced gamepad:",a),s.push(a.index));requestAnimationFrame(o)}}function i(e){t[e.index]=Object.keys(r).map((t=>[t,e.buttons[t].pressed])).reduce(((e,t)=>(e[t[0]]=t[1],e)),{})}window.addEventListener("gamepadconnected",(e=>{if("standard"!=e.gamepad.mapping)return s.push(e.gamepad.index),console.log(`🎮 Ignoring gamepad ${e.gamepad.id} because it is not a 'standard mapping' gamepad`);n(`🎮 Connected to gamepad "${e.gamepad.id}"`),i(e.gamepad),a||(a=!0,requestAnimationFrame(o))})),window.addEventListener("gamepaddisconnected",(e=>{s.includes(e.gamepad.index)&&(s=s.filter((t=>t!=e.gamepad.index))),t[e.gamepad.index]&&(n(`🎮 Gamepad "${e.gamepad.id}" disconnected`),delete t[e.gamepad.index],0==Object.keys(t).length&&(a=!1))}))}},432:e=>{let t=30;e.exports=e=>{const s={38:5,37:7,39:9,40:8,49:1,50:2,51:3,52:12,81:4,87:5,69:6,82:13,65:7,83:8,68:9,70:14,90:10,88:0,67:11,86:15,48:0,53:5,54:6,55:7,56:8,57:9};window.addEventListener("keydown",(n=>{if(e)switch(n.keyCode){case 13:return e.dumpStatus();case 187:return t*=2,e.setCyclesPerFrame(t);case 189:return t/=2,e.setCyclesPerFrame(t);default:s[n.keyCode]&&e.pressKey(s[n.keyCode])}})),window.addEventListener("keyup",(t=>{e&&s[t.keyCode]&&e.releaseKey(s[t.keyCode])})),document.querySelectorAll(".keyboard button").forEach((t=>{t.addEventListener("touchstart",(()=>{e.pressKey(t.dataset.value)}),{passive:!0}),t.addEventListener("touchend",(()=>{e.releaseKey(t.dataset.value)}),{passive:!0})}))}},82:e=>{e.exports=e=>{const t=document.querySelector(".notification");t.innerText=e,t.classList.add("active"),setTimeout((()=>t.classList.remove("active")),5e3)}},281:e=>{let t,s;function n(e){t||function(){const e=new(window.AudioContext||window.webkitAudioContext||window.audioContext);s=e.createOscillator(),t=e.createGain(),t.gain.value=0,s.frequency.value=600,s.type="triangle",s.connect(t),t.connect(e.destination),s.start()}(),t.gain.value=e}e.exports={playSound:(e,t,s)=>{e||n(.1)},stopSound:()=>{n(0)}}}},t={};function s(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";class e{constructor(){this._handlers={},document.addEventListener("click",(e=>this._callHandler("click",e))),document.addEventListener("mousedown",(e=>this._callHandler("mousedown",e))),document.addEventListener("mouseup",(e=>this._callHandler("mouseup",e)))}register(e,t={click:null,mousedown:null,mouseup:null}){"function"==typeof t&&(t={click:t}),this._handlers[e]=this._handlers[e]||[],this._handlers[e].push(t)}_callHandler(e,t){Object.keys(this._handlers).forEach((s=>{null!==t.target.closest(s)&&this._handlers[s].map((t=>t[e])).forEach((e=>{"function"!=typeof e||t.defaultPrevented||e(t,s)}))}))}}e.instance=function(){return e._instance?e._instance:e._instance=new e};const t=e;class n{constructor(e="dragging"){this._dragClass=e,this._handlers={},document.addEventListener("dragover",(e=>this._dragOver(e))),document.addEventListener("dragleave",(e=>this._dragLeave(e))),document.addEventListener("drop",(e=>this._drop(e)))}register(e,s){this._handlers[e]=s,t.instance().register(e,((e,t)=>this._openFileDialog(e,t)))}_dragOver(e){this._isDropTarget(e.target)&&(e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy",e.target.classList.add(this._dragClass))}_dragLeave(e){this._isDropTarget(e.target)&&(e.stopPropagation(),e.preventDefault(),e.target.classList.remove(this._dragClass))}_drop(e){let t=this._isDropTarget(e.target);t&&(e.stopPropagation(),e.preventDefault(),e.target.classList.remove(this._dragClass),this._handleFile(t,e,e.dataTransfer.files[0]))}_isDropTarget(e){return Object.keys(this._handlers).find((t=>{if(e.closest(t))return t}))||!1}_openFileDialog(e,t){const s=document.createElement("input");s.type="file",s.addEventListener("change",(s=>this._handleFile(t,e,s.target.files[0]))),s.click()}_handleFile(e,t,s){this._readFile(s).then((n=>this._handlers[e](s,n,t)))}_readFile(e){return new Promise(((t,s)=>{var n=new FileReader;n.addEventListener("load",(e=>t(e.target.result))),n.readAsDataURL(e)}))}}n.instance=function(){return n._instance?n._instance:n._instance=new n};const a=n;class r{constructor(e=!1,t=null){this._routes=[],e&&this.addRoutes(e,t)}install(){return t.instance().register("a[href]",(e=>this._handleClick(e))),window.addEventListener("hashchange",(e=>this._handleNavigationEvent(e))),window.addEventListener("load",(e=>this._handleNavigationEvent(e))),this}addRoute(e,t){return this._routes.push([e,t]),this}addRoutes(e,t=null){return Array.isArray(e)?e.forEach((e=>this.addRoute(e,t))):Object.keys(e).forEach((t=>this.addRoute(t,e[t]))),this}route(e,t){const s=this._matchingRoute(e);return s&&s.router?s.router.route(s.subpath,t):s&&s.handler?s.handler(s.route,s.matches,t):void 0}_handleClick(e){let t=e.target.getAttribute("href");t.startsWith("#")&&(t=t.substr(1),this._matchingRoute(t)&&(window.location.hash=t,e.preventDefault()))}_handleNavigationEvent(e){let t=window.location.hash;t.startsWith("#")&&(t=t.substr(1)),this.route(t,e)}_matchingRoute(e){return e&&(this._subRouterMatch(e)||this._stringMatch(e)||this._regExpMatch(e))}_subRouterMatch(e){const t=this._routes.filter((e=>e[1]instanceof r)).find((t=>e.startsWith(t[0]+"/")||e==t[0]));return t&&{router:t[1],subpath:e.substr(t[0].length+1)}}_stringMatch(e){const t=this._routes.find((t=>e==t[0]));return t&&{route:t[0],handler:t[1]}}_regExpMatch(e){const t=this._routes.filter((e=>e[0]instanceof RegExp)).find((t=>e.match(t[0])));return t&&{route:t[0],handler:t[1],matches:e.match(t[0])}}}const o={Click:t,FileTarget:a,Router:r,Energize:class{constructor(e,s={}){this._scope=e,this._options=this._normalizeOptions(s),t.instance().register(`${e} [${this._options.open}], ${e} [${this._options.close}], ${e} [${this._options.toggle}]`,(e=>this._handleClick(e)))}_normalizeOptions(e){return Object.assign({class:"active",open:"data-open",close:"data-close",toggle:"data-toggle",group:"data-group",timer:"data-timer",follower:"data-follower"},e)}_handleClick(e){const t=e.target.closest(`[${this._options.open}], [${this._options.close}], [${this._options.toggle}]`),s=t.getAttribute(this._options.close),n=t.getAttribute(this._options.open),a=t.getAttribute(this._options.toggle);let r=s?document.querySelectorAll(`${this._scope} ${s}`):[],o=n?document.querySelectorAll(`${this._scope} ${n}`):[];r=[...r,...a?document.querySelectorAll(`${this._scope} ${a}.${this._options.class}`):[]],o=[...o,...a?document.querySelectorAll(`${this._scope} ${a}:not(.${this._options.class})`):[]],this._close(r),this._open(o),e.preventDefault(),e.stopPropagation()}_close(e){e.forEach((e=>{e.classList.remove(this._options.class),this._close(this._followers(e))}))}_open(e){e.forEach((e=>{this._close(this._group(e)),e.classList.add(this._options.class),this._open(this._followers(e));const t=e.getAttribute(this._options.timer);t&&window.setTimeout((()=>this._close([e])),t)}))}_group(e){const t=e.getAttribute(this._options.group);return t?[...document.querySelectorAll(`${this._scope} [${this._options.group}=${t}]`)]:[]}_followers(e){const t=e.getAttribute(this._options.follower);return t?[...document.querySelectorAll(`${this._scope} ${t}`)]:[]}}},i=o;window.Thimbleful=o;var c=s(364),d=s.n(c);const l=s(447),u=new Uint8Array(d().length);for(let e=0;e<d().length;e++)u[e]=d().charCodeAt(e);window.addEventListener("load",(async()=>{const e=s(755),t=s(432),n=s(996),a=s(497),{playSound:r,stopSound:o}=s(281),c=new e({display:a,playSound:r,stopSound:o});await c.init(),t(c),n(c),c.loadProgram(l.AUTO,u),i.FileTarget.instance().register("#display",((e,t)=>{if(".ch8"!=e.name.substr(-4))return alert("You can only load *.ch8 CHIP-8 ROMs");t=atob(t.split(",")[1]);const s=new Uint8Array(new ArrayBuffer(t.length));for(let e=0;e<t.length;e++)s[e]=t.charCodeAt(e);c.loadProgram(l.AUTO,s)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,