(()=>{var e={7:(e,t,s)=>{const n=s(209);e.exports=e=>{const t={};let s=[],a=!1;const r={12:5,14:7,15:9,13:8,0:6,1:4};function o(){if(!a)return;const n=navigator.getGamepads();if(n){for(const a of n)if(a)if(t[a.index]){for(const s in r)a.buttons[s].pressed!=t[a.index][s]&&(a.buttons[s].pressed?e.pressKey(r[s]):e.releaseKey(r[s]));i(a)}else s.includes(a.index)||(console.warn("Got an unannounced gamepad:",a),s.push(a.index));requestAnimationFrame(o)}}function i(e){t[e.index]=Object.keys(r).map(t=>[t,e.buttons[t].pressed]).reduce((e,t)=>(e[t[0]]=t[1],e),{})}window.addEventListener("gamepadconnected",e=>{if("standard"!=e.gamepad.mapping)return s.push(e.gamepad.index),console.log(`🎮 Ignoring gamepad ${e.gamepad.id} because it is not a 'standard mapping' gamepad`);n(`🎮 Connected to gamepad "${e.gamepad.id}"`),i(e.gamepad),a||(a=!0,requestAnimationFrame(o))}),window.addEventListener("gamepaddisconnected",e=>{s.includes(e.gamepad.index)&&(s=s.filter(t=>t!=e.gamepad.index)),t[e.gamepad.index]&&(n(`🎮 Gamepad "${e.gamepad.id}" disconnected`),delete t[e.gamepad.index],0==Object.keys(t).length&&(a=!1))})}},18:e=>{e.exports='\0àabc\0¢,óðe@\0*@ÿ""{ðeÑ%s\bars\b*   Welcomeÿ       to Silicon-8!ÿClick the screenÿor drag a *.ch8ÿfile here ^_^\0dBd E¢ððð\0î\0\0\0\0\0\0  \0\0\0PøPøPx p(ð  @ @ @ p\0\0\0@@@@@ ¨p¨ \0@à@\0\0\0\0@\0\0à\0\0\0\0\0\0  @``@À@@àà`ðà`àððàà`à`ð @@````p`\0\0\0\0@\0@ @@ \0à\0à\0@ @À @\0@`°``ðàààppààààààÀp°`ðà@@@àà   À À àØ¨Ðð°``àà`°pààp`àø    ```¨ØP PP   à @àÀÀ@  À@@@À@ \0\0\0\0\0\0\0à@\0\0\0\0`  `À À\0``  ` `\0@ À`@À\0` `ÀÀ  \0@\0@@ À À@@@@\0 à  \0À   \0@  @\0À À\0` ` \0 À\0@@À@\0   @\0  @@\0  à \0 @@ \0  @\0À@À`@@`À@ @À\0P \0\0'},209:e=>{e.exports=e=>{const t=document.querySelector(".notification");t.innerText=e,t.classList.add("active"),setTimeout(()=>t.classList.remove("active"),5e3)}},518:e=>{const t=document.getElementById("display"),s=t.getContext("2d");e.exports={render:(e,n,a)=>{t.width=e,t.height=n;const r=s.createImageData(e,n);for(let t=0;t<n*e;t++){const e=4*t,s=3*t;r.data[e+0]=a[s+0],r.data[e+1]=a[s+1],r.data[e+2]=a[s+2],r.data[e+3]=255}s.putImageData(r,0,0)}}},543:e=>{e.exports=e=>{const t=document.querySelector(".settings");let s;return t.querySelector("button").addEventListener("click",()=>{const n=t.querySelector('input[name="interpreter"]:checked').value,a=t.querySelector('select[name="speed"]').value;e.loadProgram(n,s),e.setCyclesPerFrame(a),t.classList.remove("active"),e.start()}),e=>{s=e,t.classList.add("active")}}},701:e=>{const t=new Go;WebAssembly.instantiateStreaming||(WebAssembly.instantiateStreaming=async(e,t)=>{const s=await(await e).arrayBuffer();return await WebAssembly.instantiate(s,t)}),e.exports=class{constructor({playSound:e,stopSound:s,display:n}){e||=()=>{},s||=()=>{},this._running=!1,this._stopSound=s,Object.assign(t.importObject.env,{randomByte:()=>255&Math.floor(256*Math.random()),playSound:(t,s,n)=>{s=new Uint8Array(this._cpu.memory.buffer,s,16),e(t,s,n)},stopSound:s,render:(e,t,s)=>{const a=new Uint8Array(this._cpu.memory.buffer,s,e*t*3);n.render(e,t,a)}})}init(){return WebAssembly.instantiateStreaming(fetch("silicon8.wasm"),t.importObject).then(e=>{this._cpu=e.instance.exports,t.run(e.instance),this._interval=setInterval(()=>{this._running&&this._cpu.clockTick()},1e3/60)}).catch(e=>{console.error(e)})}setCyclesPerFrame(e){this._cpu.setCyclesPerFrame(e)}loadProgram(e,t){this._cpu.reset(e);const s=new Uint8Array(this._cpu.memory.buffer,this._cpu.ramPtr(),this._cpu.ramSize());for(let e=512;e<512+t.length;e++)s[e]=t[e-512]}dumpStatus(){this._cpu.dumpStatus()}pressKey(e){this._cpu.pressKey(e)}releaseKey(e){this._cpu.releaseKey(e)}start(){this._running=!0}stop(){this._stopSound(),this._running=!1}}},723:e=>{let t=30;e.exports=e=>{const s={38:5,37:7,39:9,40:8,49:1,50:2,51:3,52:12,81:4,87:5,69:6,82:13,65:7,83:8,68:9,70:14,90:10,88:0,67:11,86:15,48:0,53:5,54:6,55:7,56:8,57:9,32:6,16:4,17:6};window.addEventListener("keydown",n=>{if(e)switch(n.keyCode){case 13:return e.dumpStatus();case 187:return t*=2,e.setCyclesPerFrame(t);case 189:return t/=2,e.setCyclesPerFrame(t);default:e&&Object.keys(s).includes(n.keyCode.toString())&&e.pressKey(s[n.keyCode])}}),window.addEventListener("keyup",t=>{e&&Object.keys(s).includes(t.keyCode.toString())&&e.releaseKey(s[t.keyCode])}),document.querySelectorAll(".keyboard button").forEach(t=>{t.addEventListener("touchstart",()=>{e.pressKey(t.dataset.value)},{passive:!0}),t.addEventListener("touchend",()=>{e.releaseKey(t.dataset.value)},{passive:!0})})}},763:e=>{e.exports={playSound:(e,s,n)=>{e?(t.instance().setToSound(s,n),t.instance().setVolume(3e-4)):(t.instance().setToBleep(),t.instance().setVolume(.1))},stopSound:()=>{t.instance().setVolume(0)}};class t{constructor(){this._audioCtx=new(window.AudioContext||window.webkitAudioContext||window.audioContext),this._oscillator=this._audioCtx.createOscillator(),this._gainNode=this._audioCtx.createGain(),this._oscillator.connect(this._gainNode),this._gainNode.connect(this._audioCtx.destination),this.setVolume(0),this._oscillator.start()}setVolume(e){this._gainNode.gain.value=e}setToBleep(){this._oscillator.frequency.value=600,this._oscillator.type="triangle"}setToSound(e,t){this._oscillator.setPeriodicWave(this._periodicWave(this._patternToBits(e))),this._oscillator.frequency.value=t/128}_patternToBits(e){const t=new Float32Array(512);let s=0;for(const n of e){let e=128;for(;0!=e;){const a=0!=(n&e)?1:0;t[s++]=a,t[s++]=a,t[s++]=a,t[s++]=a,e>>=1}}return t}_periodicWave(e){var t=new Float32Array(e.length),s=this._FFT(e,t);return this._audioCtx.createPeriodicWave(s[0].slice(0,s[0].length/2),s[1].slice(0,s[1].length/2),{disableNormalization:!0})}_FFT(e,t){var s=e.length;if(1==s)return[e,t];for(var n=Math.cos(2*Math.PI/s),a=Math.sin(2*Math.PI/s),r=new Float32Array(s/2),o=new Float32Array(s/2),i=new Float32Array(s/2),c=new Float32Array(s/2),l=0;l<s;l++)1&l?(i[l>>1]=e[l],c[l>>1]=t[l]):(r[l>>1]=e[l],o[l>>1]=t[l]);for(var d=this._FFT(r,o),u=this._FFT(i,c),h=d[0],p=d[1],_=u[0],g=u[1],m=new Float32Array(s),y=new Float32Array(s),f=(l=0,s/2),v=1,w=0,b=0;l<f;l++){var A=h[l],x=p[l],S=_[l],E=g[l];m[l]=A+v*S-w*E,y[l]=x+v*E+w*S,m[l+f]=A-v*S+w*E,y[l+f]=x-v*E-w*S,b=v*n-w*a,w=v*a+w*n,v=b}return[m,y]}}t.instance=()=>t._instance?t._instance:t._instance=new t},902:e=>{e.exports={AUTO:0,VIP:1,BLINDVIP:2,SCHIP:3,XOCHIP:4}}},t={};function s(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";class e{constructor(){this._handlers={},document.addEventListener("click",e=>this._callHandler("click",e)),document.addEventListener("mousedown",e=>this._callHandler("mousedown",e)),document.addEventListener("mouseup",e=>this._callHandler("mouseup",e))}register(e,t={click:null,mousedown:null,mouseup:null}){"function"==typeof t&&(t={click:t}),this._handlers[e]=this._handlers[e]||[],this._handlers[e].push(t)}_callHandler(e,t){Object.keys(this._handlers).forEach(s=>{null!==t.target.closest(s)&&this._handlers[s].map(t=>t[e]).forEach(e=>{"function"!=typeof e||t.defaultPrevented||e(t,s)})})}}e.instance=function(){return e._instance?e._instance:e._instance=new e};const t=e;class n{constructor(e="dragging"){this._dragClass=e,this._handlers={},document.addEventListener("dragover",e=>this._dragOver(e)),document.addEventListener("dragleave",e=>this._dragLeave(e)),document.addEventListener("drop",e=>this._drop(e))}register(e,s){this._handlers[e]=s,t.instance().register(e,(e,t)=>this._openFileDialog(e,t))}_dragOver(e){this._isDropTarget(e.target)&&(e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy",e.target.classList.add(this._dragClass))}_dragLeave(e){this._isDropTarget(e.target)&&(e.stopPropagation(),e.preventDefault(),e.target.classList.remove(this._dragClass))}_drop(e){let t=this._isDropTarget(e.target);t&&(e.stopPropagation(),e.preventDefault(),e.target.classList.remove(this._dragClass),this._handleFile(t,e,e.dataTransfer.files[0]))}_isDropTarget(e){return Object.keys(this._handlers).find(t=>{if(e.closest(t))return t})||!1}_openFileDialog(e,t){const s=document.createElement("input");s.type="file",s.addEventListener("change",s=>this._handleFile(t,e,s.target.files[0])),s.click()}_handleFile(e,t,s){this._readFile(s).then(n=>this._handlers[e](s,n,t))}_readFile(e){return new Promise((t,s)=>{var n=new FileReader;n.addEventListener("load",e=>t(e.target.result)),n.readAsDataURL(e)})}}n.instance=function(){return n._instance?n._instance:n._instance=new n};const a=n;class r{constructor(e=!1,t=null){this._routes=[],e&&this.addRoutes(e,t)}install(){return t.instance().register("a[href]",e=>this._handleClick(e)),window.addEventListener("hashchange",e=>this._handleNavigationEvent(e)),window.addEventListener("load",e=>this._handleNavigationEvent(e)),this}addRoute(e,t){return this._routes.push([e,t]),this}addRoutes(e,t=null){return Array.isArray(e)?e.forEach(e=>this.addRoute(e,t)):Object.keys(e).forEach(t=>this.addRoute(t,e[t])),this}route(e,t){const s=this._matchingRoute(e);return s&&s.router?s.router.route(s.subpath,t):s&&s.handler?s.handler(s.route,s.matches,t):void 0}_handleClick(e){let t=e.target.getAttribute("href");t.startsWith("#")&&(t=t.substr(1),this._matchingRoute(t)&&(window.location.hash=t,e.preventDefault()))}_handleNavigationEvent(e){let t=window.location.hash;t.startsWith("#")&&(t=t.substr(1)),this.route(t,e)}_matchingRoute(e){return e&&(this._subRouterMatch(e)||this._stringMatch(e)||this._regExpMatch(e))}_subRouterMatch(e){const t=this._routes.filter(e=>e[1]instanceof r).find(t=>e.startsWith(t[0]+"/")||e==t[0]);return t&&{router:t[1],subpath:e.substr(t[0].length+1)}}_stringMatch(e){const t=this._routes.find(t=>e==t[0]);return t&&{route:t[0],handler:t[1]}}_regExpMatch(e){const t=this._routes.filter(e=>e[0]instanceof RegExp).find(t=>e.match(t[0]));return t&&{route:t[0],handler:t[1],matches:e.match(t[0])}}}const o={Click:t,FileTarget:a,Router:r,Energize:class{constructor(e,s={}){this._scope=e,this._options=this._normalizeOptions(s),t.instance().register(`${e} [${this._options.open}], ${e} [${this._options.close}], ${e} [${this._options.toggle}]`,e=>this._handleClick(e))}_normalizeOptions(e){return Object.assign({class:"active",open:"data-open",close:"data-close",toggle:"data-toggle",group:"data-group",timer:"data-timer",follower:"data-follower"},e)}_handleClick(e){const t=e.target.closest(`[${this._options.open}], [${this._options.close}], [${this._options.toggle}]`),s=t.getAttribute(this._options.close),n=t.getAttribute(this._options.open),a=t.getAttribute(this._options.toggle);let r=s?document.querySelectorAll(`${this._scope} ${s}`):[],o=n?document.querySelectorAll(`${this._scope} ${n}`):[];r=[...r,...a?document.querySelectorAll(`${this._scope} ${a}.${this._options.class}`):[]],o=[...o,...a?document.querySelectorAll(`${this._scope} ${a}:not(.${this._options.class})`):[]],this._close(r),this._open(o),e.preventDefault(),e.stopPropagation()}_close(e){e.forEach(e=>{e.classList.remove(this._options.class),this._close(this._followers(e))})}_open(e){e.forEach(e=>{this._close(this._group(e)),e.classList.add(this._options.class),this._open(this._followers(e));const t=e.getAttribute(this._options.timer);t&&window.setTimeout(()=>this._close([e]),t)})}_group(e){const t=e.getAttribute(this._options.group);return t?[...document.querySelectorAll(`${this._scope} [${this._options.group}=${t}]`)]:[]}_followers(e){const t=e.getAttribute(this._options.follower);return t?[...document.querySelectorAll(`${this._scope} ${t}`)]:[]}}},i=o;window.Thimbleful=o;var c=s(18),l=s.n(c);const d=s(902),u=new Uint8Array(l().length);for(let e=0;e<l().length;e++)u[e]=l().charCodeAt(e);window.addEventListener("load",async()=>{const e=s(701),t=s(723),n=s(7),a=s(543),r=s(518),{playSound:o,stopSound:c}=s(763),l=new e({display:r,playSound:o,stopSound:c});await l.init(),t(l),n(l);const h=a(l);l.loadProgram(d.AUTO,u),l.start(),i.FileTarget.instance().register("#display",(e,t)=>{if(".ch8"!=e.name.substr(-4))return alert("You can only load *.ch8 CHIP-8 ROMs");t=atob(t.split(",")[1]);const s=new Uint8Array(new ArrayBuffer(t.length));for(let e=0;e<t.length;e++)s[e]=t.charCodeAt(e);l.stop(),h(s)})})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQVMsVUFBRUMsR0FBYyxFQUFRLEtBRW5DaEYsRUFBVyxJQUFJK1MsRUFBUyxDQUFFOU4sVUFBU0YsWUFBV0Msb0JBQzlDaEYsRUFBU21HLE9BQ2Y2TSxFQUFTaFQsR0FDVFMsRUFBUVQsR0FDUixNQUFNaVQsRUFBZXJQLEVBQVM1RCxHQUU5QkEsRUFBU2dFLFlBQVk2TyxFQUFNcEgsS0FBTXFILEdBQ2pDOVMsRUFBU2tFLFFBRVUsRUFBVzRKLFdBQVc5TixXQUM5Qm1OLFNBQVMsV0FBWSxDQUFDOEIsRUFBTXZMLEtBQ3JDLEdBQTZCLFFBQXhCdUwsRUFBS2lFLEtBQUtyQyxRQUFRLEdBQ3JCLE9BQU9zQyxNQUFNLHVDQUNmelAsRUFBTzBQLEtBQUsxUCxFQUFLMlAsTUFBTSxLQUFLLElBQzVCLE1BQU14UCxFQUFVLElBQUlpQyxXQUFXLElBQUl3TixZQUFZNVAsRUFBS3ZCLFNBQ3BELElBQU0sSUFBSW9CLEVBQUksRUFBR0EsRUFBSUcsRUFBS3ZCLE9BQVFvQixJQUNoQ00sRUFBUU4sR0FBS0csRUFBSzZQLFdBQVdoUSxHQUMvQnZELEVBQVNtSCxPQUNUOEwsRUFBYXBQLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaWxpY29uOC8uL3dlYi1jbGllbnQvZ2FtZXBhZC5qcyIsIndlYnBhY2s6Ly9zaWxpY29uOC8uL3dlYi1jbGllbnQvd2VsY29tZS5jaDgiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi93ZWItY2xpZW50L25vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9zaWxpY29uOC8uL3dlYi1jbGllbnQvZGlzcGxheS5qcyIsIndlYnBhY2s6Ly9zaWxpY29uOC8uL3dlYi1jbGllbnQvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi93ZWItY2xpZW50L2VtdWxhdG9yLmpzIiwid2VicGFjazovL3NpbGljb244Ly4vd2ViLWNsaWVudC9rZXlib2FyZC5qcyIsIndlYnBhY2s6Ly9zaWxpY29uOC8uL3dlYi1jbGllbnQvc291bmQuanMiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi9zaGFyZWQvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3NpbGljb244L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi9ub2RlX21vZHVsZXMvdGhpbWJsZWZ1bC9zcmMvY2xpY2suanMiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi9ub2RlX21vZHVsZXMvdGhpbWJsZWZ1bC9zcmMvZmlsZXRhcmdldC5qcyIsIndlYnBhY2s6Ly9zaWxpY29uOC8uL25vZGVfbW9kdWxlcy90aGltYmxlZnVsL3NyYy9yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi9ub2RlX21vZHVsZXMvdGhpbWJsZWZ1bC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi9ub2RlX21vZHVsZXMvdGhpbWJsZWZ1bC9zcmMvZW5lcmdpemUuanMiLCJ3ZWJwYWNrOi8vc2lsaWNvbjgvLi93ZWItY2xpZW50L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5vdGlmeSA9IHJlcXVpcmUoJy4vbm90aWZpY2F0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zdGFuY2UgPT4ge1xuXG4gIGNvbnN0IGdhbWVwYWRzID0ge307XG4gIGxldCB1bmFubm91bmNlZEdhbWVwYWRzID0gW107XG4gIGxldCBydW5uaW5nID0gZmFsc2U7XG5cbiAgLy8gRGVmYXVsdCBidXR0b25zIGZvciBhIHN0YW5kYXJkIGNvbnRyb2xsZXJcbiAgY29uc3Qga2V5cyA9IHtcbiAgICAxMjogNSwgLy8gVXBcbiAgICAxNDogNywgLy8gTGVmdFxuICAgIDE1OiA5LCAvLyBSaWdodFxuICAgIDEzOiA4LCAvLyBEb3duXG5cbiAgICAwOiA2LCAgLy8gQVxuICAgIDE6IDQgICAvLyBCXG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRjb25uZWN0ZWQnLCBlID0+IHtcbiAgICAvLyBJZ25vcmUgY29udHJvbGxlcnMgdGhhdCBhcmUgbm90IHN0YW5kYXJkIGNvbnRyb2xsZXJzXG4gICAgaWYgKCBlLmdhbWVwYWQubWFwcGluZyAhPSBcInN0YW5kYXJkXCIgKSB7XG4gICAgICB1bmFubm91bmNlZEdhbWVwYWRzLnB1c2goZS5nYW1lcGFkLmluZGV4KTtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhg8J+OriBJZ25vcmluZyBnYW1lcGFkICR7ZS5nYW1lcGFkLmlkfSBiZWNhdXNlIGl0IGlzIG5vdCBhICdzdGFuZGFyZCBtYXBwaW5nJyBnYW1lcGFkYCk7XG4gICAgfVxuXG4gICAgbm90aWZ5KGDwn46uIENvbm5lY3RlZCB0byBnYW1lcGFkIFwiJHtlLmdhbWVwYWQuaWR9XCJgKTtcbiAgICBzYXZlU3RhdGUoZS5nYW1lcGFkKTtcbiAgICBpZiAoICFydW5uaW5nICkge1xuICAgICAgcnVubmluZyA9IHRydWU7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocG9sbEdhbWVwYWRzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdnYW1lcGFkZGlzY29ubmVjdGVkJywgZSA9PiB7XG4gICAgLy8gUmVtb3ZlIHVuYW5ub3VuY2VkIGdhbWVwYWRzIGZyb20gb3VyIGxpc3QgaWYgdGhleSBsZWF2ZVxuICAgIGlmICggdW5hbm5vdW5jZWRHYW1lcGFkcy5pbmNsdWRlcyhlLmdhbWVwYWQuaW5kZXgpIClcbiAgICAgIHVuYW5ub3VuY2VkR2FtZXBhZHMgPSB1bmFubm91bmNlZEdhbWVwYWRzLmZpbHRlcihnID0+IGcgIT0gZS5nYW1lcGFkLmluZGV4KTtcbiAgICAvLyBJZ25vcmUgY29udHJvbGxlcnMgdGhhdCBhcmUgbm90IGluIG91ciBtYWluIGxpc3RcbiAgICBpZiAoICFnYW1lcGFkc1tlLmdhbWVwYWQuaW5kZXhdIClcbiAgICAgIHJldHVybjtcblxuICAgIG5vdGlmeShg8J+OriBHYW1lcGFkIFwiJHtlLmdhbWVwYWQuaWR9XCIgZGlzY29ubmVjdGVkYCk7XG4gICAgZGVsZXRlIGdhbWVwYWRzW2UuZ2FtZXBhZC5pbmRleF07XG4gICAgaWYgKCBPYmplY3Qua2V5cyhnYW1lcGFkcykubGVuZ3RoID09IDAgKSBydW5uaW5nID0gZmFsc2U7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHBvbGxHYW1lcGFkcygpIHtcbiAgICBpZiAoICFydW5uaW5nICkgcmV0dXJuO1xuXG4gICAgY29uc3QgY3VycmVudEdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzKCk7XG4gICAgaWYgKCAhY3VycmVudEdhbWVwYWRzICkgcmV0dXJuO1xuXG4gICAgZm9yICggY29uc3QgZ2FtZXBhZCBvZiBjdXJyZW50R2FtZXBhZHMgKSB7XG4gICAgICAvLyBEb24ndCB1c2Ugbm9uLWV4aXN0YW50IGdhbWVwYWRzIChsb29raW5nIGF0IHlvdSwgQ2hyb21lKVxuICAgICAgaWYgKCAhZ2FtZXBhZCApIGNvbnRpbnVlO1xuXG4gICAgICAvLyBPbmx5IHVzZSBnYW1lcGFkcyB0aGF0IHdlIGdvdCBhIHZhbGlkIGNvbm5lY3QgZXZlbnQgZm9yXG4gICAgICBpZiAoICFnYW1lcGFkc1tnYW1lcGFkLmluZGV4XSApIHtcbiAgICAgICAgaWYgKCAhdW5hbm5vdW5jZWRHYW1lcGFkcy5pbmNsdWRlcyhnYW1lcGFkLmluZGV4KSApIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJHb3QgYW4gdW5hbm5vdW5jZWQgZ2FtZXBhZDpcIiwgZ2FtZXBhZCk7XG4gICAgICAgICAgdW5hbm5vdW5jZWRHYW1lcGFkcy5wdXNoKGdhbWVwYWQuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhbnkgb2YgdGhlICh1c2VmdWwpIGJ1dHRvbnMgY2hhbmdlIHN0YXRlIG9uIGFueSBvZiB0aGUgZ2FtZXBhZHMsXG4gICAgICAvLyBsZXQgU2lsaWNvbjgga25vdy5cbiAgICAgIGZvciAoIGNvbnN0IGtleSBpbiBrZXlzICkge1xuICAgICAgICBpZiAoIGdhbWVwYWQuYnV0dG9uc1trZXldLnByZXNzZWQgIT0gZ2FtZXBhZHNbZ2FtZXBhZC5pbmRleF1ba2V5XSApIHtcbiAgICAgICAgICBpZiAoIGdhbWVwYWQuYnV0dG9uc1trZXldLnByZXNzZWQgKVxuICAgICAgICAgICAgaW5zdGFuY2UucHJlc3NLZXkoa2V5c1trZXldKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBpbnN0YW5jZS5yZWxlYXNlS2V5KGtleXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2F2ZSBuZXcgc3RhdGUgZm9yIG5leHQgbG9vcFxuICAgICAgc2F2ZVN0YXRlKGdhbWVwYWQpO1xuICAgIH1cblxuICAgIC8vIEtlZXAgcG9sbGluZ1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShwb2xsR2FtZXBhZHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2F2ZVN0YXRlKGdhbWVwYWQpIHtcbiAgICBnYW1lcGFkc1tnYW1lcGFkLmluZGV4XSA9XG4gICAgICBPYmplY3Qua2V5cyhrZXlzKVxuICAgICAgICAgICAgLm1hcChrZXkgPT4gW2tleSwgZ2FtZXBhZC5idXR0b25zW2tleV0ucHJlc3NlZF0pXG4gICAgICAgICAgICAucmVkdWNlKChhY2MsIHZhbHVlKSA9PiAoYWNjW3ZhbHVlWzBdXSA9IHZhbHVlWzFdLCBhY2MpLCB7fSk7XG4gIH1cblxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCJcXHUwMDAww6BhXFx1MDAwMWJcXHUwMDAxY1xcdTAwMDDCoizDs1xcdTAwMWXDsGVAXFx1MDAwMFxcdTAwMTIqQMO/XFx1MDAxMlxcXCJcXFwie8OwZcORJcKBXFx1MDAwNHNcXHUwMDAxXFx1MDAxMlxcYmFcXHUwMDAxclxcdTAwMDZzXFx1MDAwMVxcdTAwMTJcXGJcXHUwMDEyKiAgIFdlbGNvbWXDvyAgICAgICB0byBTaWxpY29uLTghw79DbGljayB0aGUgc2NyZWVuw79vciBkcmFnIGEgKi5jaDjDv2ZpbGUgaGVyZSBeX15cXHUwMDAwZH/CgEJkIMKARcKiwo/CgFxcdTAwMGXDsFxcdTAwMWXDsFxcdTAwMWXDsFxcdTAwMWVcXHUwMDAww65cXHUwMDAyXFx1MDAwMFxcdTAwMDBcXHUwMDAwXFx1MDAwMFxcdTAwMDBcXHUwMDAywoDCgMKAXFx1MDAwMMKAXFx1MDAwNMKgwqBcXHUwMDAwXFx1MDAwMFxcdTAwMDBcXHUwMDA2UMO4UMO4UFxcdTAwMDZ4wqBwKMOwXFx1MDAwNMKgIEDCgMKgXFx1MDAwNUDCoEDCoHBcXHUwMDAywoDCgFxcdTAwMDBcXHUwMDAwXFx1MDAwMFxcdTAwMDNAwoDCgMKAQFxcdTAwMDPCgEBAQMKAXFx1MDAwNiDCqHDCqCBcXHUwMDA0XFx1MDAwMEDDoEBcXHUwMDAwXFx1MDAwM1xcdTAwMDBcXHUwMDAwXFx1MDAwMEDCgFxcdTAwMDRcXHUwMDAwXFx1MDAwMMOgXFx1MDAwMFxcdTAwMDBcXHUwMDAyXFx1MDAwMFxcdTAwMDBcXHUwMDAwXFx1MDAwMMKAXFx1MDAwNCAgQMKAwoBcXHUwMDA1YMKQwpDCkGBcXHUwMDA0QMOAQEDDoFxcdTAwMDXDoFxcdTAwMTBgwoDDsFxcdTAwMDXDoFxcdTAwMTBgXFx1MDAxMMOgXFx1MDAwNcKAwpDDsFxcdTAwMTBcXHUwMDEwXFx1MDAwNcOwwoDDoFxcdTAwMTDDoFxcdTAwMDVgwoDDoMKQYFxcdTAwMDXDsFxcdTAwMTAgQEBcXHUwMDA1YMKQYMKQYFxcdTAwMDVgwpBwXFx1MDAxMGBcXHUwMDAyXFx1MDAwMMKAXFx1MDAwMMKAXFx1MDAwMFxcdTAwMDNcXHUwMDAwQFxcdTAwMDBAwoBcXHUwMDA0IEDCgEAgXFx1MDAwNFxcdTAwMDDDoFxcdTAwMDDDoFxcdTAwMDBcXHUwMDA0woBAIEDCgFxcdTAwMDTDgCBAXFx1MDAwMEBcXHUwMDA1YMKQwrDCgGBcXHUwMDA1YMKQw7DCkMKQXFx1MDAwNcOgwpDDoMKQw6BcXHUwMDA1cMKAwoDCgHBcXHUwMDA1w6DCkMKQwpDDoFxcdTAwMDTDoMKAw6DCgMOgXFx1MDAwNMOgwoDDgMKAwoBcXHUwMDA1cMKAwrDCkGBcXHUwMDA1wpDCkMOwwpDCkFxcdTAwMDTDoEBAQMOgXFx1MDAwNMOgICAgw4BcXHUwMDA1wpDCoMOAwqDCkFxcdTAwMDTCgMKAwoDCgMOgXFx1MDAwNsKIw5jCqMKIwohcXHUwMDA1wpDDkMOwwrDCkFxcdTAwMDVgwpDCkMKQYFxcdTAwMDXDoMKQw6DCgMKAXFx1MDAwNWDCkMKQwrBwXFx1MDAwNcOgwpDDoMKQwpBcXHUwMDA1cMKAYFxcdTAwMTDDoFxcdTAwMDbDuCAgICBcXHUwMDA1wpDCkMKQwpBgXFx1MDAwNcKQwpDCkGBgXFx1MDAwNsKIwojCqMOYwohcXHUwMDA2wohQIFDCiFxcdTAwMDbCiFAgICBcXHUwMDA0w6AgQMKAw6BcXHUwMDAzw4DCgMKAwoDDgFxcdTAwMDTCgMKAQCAgXFx1MDAwM8OAQEBAw4BcXHUwMDA0QMKgXFx1MDAwMFxcdTAwMDBcXHUwMDAwXFx1MDAwNFxcdTAwMDBcXHUwMDAwXFx1MDAwMFxcdTAwMDDDoFxcdTAwMDPCgEBcXHUwMDAwXFx1MDAwMFxcdTAwMDBcXHUwMDA0XFx1MDAwMGDCoMKgYFxcdTAwMDTCgMKAw4DCoMOAXFx1MDAwNFxcdTAwMDBgwoDCgGBcXHUwMDA0ICBgwqBgXFx1MDAwNFxcdTAwMDBAwqDDgGBcXHUwMDAzQMKAw4DCgMKAXFx1MDAwNFxcdTAwMDBgwqBgw4BcXHUwMDA0woDCgMOAwqDCoFxcdTAwMDLCgFxcdTAwMDDCgMKAwoBcXHUwMDAzQFxcdTAwMDBAQMKAXFx1MDAwNMKAwoDCoMOAwqBcXHUwMDAzw4BAQEBAXFx1MDAwNFxcdTAwMDDCoMOgwqDCoFxcdTAwMDRcXHUwMDAww4DCoMKgwqBcXHUwMDA0XFx1MDAwMEDCoMKgQFxcdTAwMDRcXHUwMDAww4DCoMOAwoBcXHUwMDA0XFx1MDAwMGDCoGAgXFx1MDAwNFxcdTAwMDDCoMOAwoDCgFxcdTAwMDNcXHUwMDAwQMKAQMKAXFx1MDAwM8KAwoDDgMKAQFxcdTAwMDRcXHUwMDAwwqDCoMKgQFxcdTAwMDRcXHUwMDAwwqDCoEBAXFx1MDAwNFxcdTAwMDDCoMKgw6DCoFxcdTAwMDRcXHUwMDAwwqBAQMKgXFx1MDAwNFxcdTAwMDDCoMKgQMKAXFx1MDAwM1xcdTAwMDDDgEDCgMOAXFx1MDAwNGBAwoBAYFxcdTAwMDLCgMKAwoDCgMKAXFx1MDAwNMOAQCBAw4BcXHUwMDA1XFx1MDAwMFDCoFxcdTAwMDBcXHUwMDAwXCIiLCJtb2R1bGUuZXhwb3J0cyA9IG1lc3NhZ2UgPT4ge1xuICBjb25zdCBub3RpZmljYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubm90aWZpY2F0aW9uJyk7XG4gIG5vdGlmaWNhdGlvbi5pbm5lclRleHQgPSBtZXNzYWdlO1xuICBub3RpZmljYXRpb24uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gIHNldFRpbWVvdXQoKCkgPT4gbm90aWZpY2F0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpLCA1MDAwKTtcbn1cbiIsImNvbnN0IGNhbnZhcyAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlzcGxheScpO1xuY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyOiAod2lkdGgsIGhlaWdodCwgYnl0ZXMpID0+IHtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpO1xuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGhlaWdodCAqIHdpZHRoOyBpKysgKSB7XG4gICAgICBjb25zdCBkaXNwbGF5T2Zmc2V0ICA9IGkgKiA0O1xuICAgICAgY29uc3Qgc2lsaWNvbjhPZmZzZXQgPSBpICogMztcbiAgICAgIGltYWdlRGF0YS5kYXRhW2Rpc3BsYXlPZmZzZXQrMF0gPSBieXRlc1tzaWxpY29uOE9mZnNldCswXTtcbiAgICAgIGltYWdlRGF0YS5kYXRhW2Rpc3BsYXlPZmZzZXQrMV0gPSBieXRlc1tzaWxpY29uOE9mZnNldCsxXTtcbiAgICAgIGltYWdlRGF0YS5kYXRhW2Rpc3BsYXlPZmZzZXQrMl0gPSBieXRlc1tzaWxpY29uOE9mZnNldCsyXTtcbiAgICAgIGltYWdlRGF0YS5kYXRhW2Rpc3BsYXlPZmZzZXQrM10gPSAweEZGO1xuICAgIH1cbiAgICBjb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBpbnN0YW5jZSA9PiB7XG4gIGNvbnN0IHNldHRpbmdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzJyk7XG4gIGxldCBwcm9ncmFtO1xuXG4gIHNldHRpbmdzLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpXG4gICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBzZXR0aW5ncy5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwiaW50ZXJwcmV0ZXJcIl06Y2hlY2tlZCcpLnZhbHVlO1xuICAgIGNvbnN0IHNwZWVkID0gc2V0dGluZ3MucXVlcnlTZWxlY3Rvcignc2VsZWN0W25hbWU9XCJzcGVlZFwiXScpLnZhbHVlO1xuICAgIGluc3RhbmNlLmxvYWRQcm9ncmFtKHR5cGUsIHByb2dyYW0pO1xuICAgIGluc3RhbmNlLnNldEN5Y2xlc1BlckZyYW1lKHNwZWVkKTtcbiAgICBzZXR0aW5ncy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICBpbnN0YW5jZS5zdGFydCgpO1xuICB9KTtcblxuICByZXR1cm4gcHJnbSA9PiB7XG4gICAgcHJvZ3JhbSA9IHByZ207XG4gICAgc2V0dGluZ3MuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gIH1cbn1cbiIsIi8vIFRoaXMgaXMganVzdCBhIHdyYXBwZXIgZm9yIGFsbCB0aGUgV2ViQXNzZW1ibHkgc3R1ZmYuXG5cbi8vIHJlcXVpcmUoJy4vd2FzbV9leGVjLmpzJyk7XG5jb25zdCBnbyA9IG5ldyBHbygpO1xuXG5pZiAoIVdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKSB7IC8vIHBvbHlmaWxsXG4gIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nID0gYXN5bmMgKHJlc3AsIGltcG9ydE9iamVjdCkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IChhd2FpdCByZXNwKS5hcnJheUJ1ZmZlcigpO1xuICAgIHJldHVybiBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShzb3VyY2UsIGltcG9ydE9iamVjdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3Mge1xuXG4gIGNvbnN0cnVjdG9yKHtwbGF5U291bmQsIHN0b3BTb3VuZCwgZGlzcGxheX0pIHtcbiAgICBwbGF5U291bmQgfHw9ICgpID0+IHt9O1xuICAgIHN0b3BTb3VuZCB8fD0gKCkgPT4ge307XG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3N0b3BTb3VuZCA9IHN0b3BTb3VuZDtcblxuICAgIE9iamVjdC5hc3NpZ24oZ28uaW1wb3J0T2JqZWN0LmVudiwge1xuICAgICAgcmFuZG9tQnl0ZTogKCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSAmIDB4RkYsXG4gICAgICBwbGF5U291bmQ6ICAocGxheWluZ1BhdHRlcm4sIHBhdHRlcm4sIHBpdGNoKSA9PiB7XG4gICAgICAgIHBhdHRlcm4gPSBuZXcgVWludDhBcnJheSh0aGlzLl9jcHUubWVtb3J5LmJ1ZmZlciwgcGF0dGVybiwgMTYpO1xuICAgICAgICBwbGF5U291bmQocGxheWluZ1BhdHRlcm4sIHBhdHRlcm4sIHBpdGNoKTtcbiAgICAgIH0sXG4gICAgICBzdG9wU291bmQ6ICBzdG9wU291bmQsXG4gICAgICByZW5kZXI6ICh3aWR0aCwgaGVpZ2h0LCBkYXRhUHRyKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fY3B1Lm1lbW9yeS5idWZmZXIsIGRhdGFQdHIsIHdpZHRoICogaGVpZ2h0ICogMyk7XG4gICAgICAgIGRpc3BsYXkucmVuZGVyKHdpZHRoLCBoZWlnaHQsIGJ5dGVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgcmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGZldGNoKFwic2lsaWNvbjgud2FzbVwiKSwgZ28uaW1wb3J0T2JqZWN0KVxuICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICB0aGlzLl9jcHUgPSByZXN1bHQuaW5zdGFuY2UuZXhwb3J0cztcbiAgICAgIGdvLnJ1bihyZXN1bHQuaW5zdGFuY2UpO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9ydW5uaW5nKVxuICAgICAgICAgIHRoaXMuX2NwdS5jbG9ja1RpY2soKVxuICAgICAgfSwgMTAwMCAvIDYwKTtcbiAgICB9KVxuICAgIC5jYXRjaChlID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRDeWNsZXNQZXJGcmFtZShuZXdDeWNsZXMpIHtcbiAgICB0aGlzLl9jcHUuc2V0Q3ljbGVzUGVyRnJhbWUobmV3Q3ljbGVzKTtcbiAgfVxuXG4gIGxvYWRQcm9ncmFtKHR5cGUsIHByb2dyYW0pIHtcbiAgICB0aGlzLl9jcHUucmVzZXQodHlwZSk7XG4gICAgY29uc3QgcmFtID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fY3B1Lm1lbW9yeS5idWZmZXIsIHRoaXMuX2NwdS5yYW1QdHIoKSwgdGhpcy5fY3B1LnJhbVNpemUoKSk7XG4gICAgLy8gTG9hZCBwcm9ncmFtIGludG8gUkFNXG4gICAgZm9yICggbGV0IGkgPSAweDIwMDsgaSA8IDB4MjAwICsgcHJvZ3JhbS5sZW5ndGg7IGkrKyApIHJhbVtpXSA9IHByb2dyYW1baSAtIDB4MjAwXTtcbiAgfVxuXG4gIGR1bXBTdGF0dXMoKSB7XG4gICAgdGhpcy5fY3B1LmR1bXBTdGF0dXMoKTtcbiAgfVxuXG4gIHByZXNzS2V5KGtleSkge1xuICAgIHRoaXMuX2NwdS5wcmVzc0tleShrZXkpO1xuICB9XG5cbiAgcmVsZWFzZUtleShrZXkpIHtcbiAgICB0aGlzLl9jcHUucmVsZWFzZUtleShrZXkpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG4gIH1cblxuICBzdG9wKCkge1xuICAgIHRoaXMuX3N0b3BTb3VuZCgpO1xuICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgfVxuXG59XG4iLCJsZXQgY3ljbGVzUGVyRnJhbWUgPSAzMDtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnN0YW5jZSA9PiB7XG4gIGNvbnN0IGtleXMgPSB7XG4gICAgLy8gQXJyb3cga2V5c1xuICAgIDM4OiA1LCBcdFx0Ly8gdXBcbiAgICAzNzogNywgXHRcdC8vIGxlZnRcbiAgICAzOTogOSwgXHRcdC8vIHJpZ2h0XG4gICAgNDA6IDgsIFx0XHQvLyBkb3duXG5cbiAgICAvLyAxNiBrZXkgcGFkXG4gICAgNDk6IDEsXHRcdC8vIDFcbiAgICA1MDogMixcdFx0Ly8gMlxuICAgIDUxOiAzLFx0XHQvLyAzXG4gICAgNTI6IDB4QyxcdC8vIDRcbiAgICA4MTogNCwgXHRcdC8vIFFcbiAgICA4NzogNSwgXHRcdC8vIFdcbiAgICA2OTogNiwgXHRcdC8vIEVcbiAgICA4MjogMHhELCBcdC8vIFJcbiAgICA2NTogNywgXHRcdC8vIEFcbiAgICA4MzogOCwgXHRcdC8vIFNcbiAgICA2ODogOSwgXHRcdC8vIERcbiAgICA3MDogMHhFLCBcdC8vIEZcbiAgICA5MDogMHhBLCBcdC8vIFpcbiAgICA4ODogMCwgXHRcdC8vIFhcbiAgICA2NzogMHhCLCBcdC8vIENcbiAgICA4NjogMHhGLCBcdC8vIFZcblxuICAgIC8vIE90aGVyIG51bWJlciBrZXlzXG4gICAgNDg6IDAsXG4gICAgNTM6IDUsXG4gICAgNTQ6IDYsXG4gICAgNTU6IDcsXG4gICAgNTY6IDgsXG4gICAgNTc6IDksXG5cbiAgICAvLyBTcGVjaWFsIGtleXNcbiAgICAzMjogNiwgICAgIC8vIFNwYWNlIGJhclxuICAgIDE2OiA0LCAgICAgLy8gU2hpZnRcbiAgICAxNzogNiwgICAgIC8vIENvbnRyb2xcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgIGlmICggIWluc3RhbmNlICkgcmV0dXJuO1xuICAgIHN3aXRjaChlLmtleUNvZGUpIHtcbiAgICAgIGNhc2UgMTM6ICAvLyBFbnRlclxuICAgICAgICByZXR1cm4gaW5zdGFuY2UuZHVtcFN0YXR1cygpO1xuICAgICAgY2FzZSAxODc6IC8vICtcbiAgICAgICAgY3ljbGVzUGVyRnJhbWUgKj0gMjtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnNldEN5Y2xlc1BlckZyYW1lKGN5Y2xlc1BlckZyYW1lKTtcbiAgICAgIGNhc2UgMTg5OiAvLyAtXG4gICAgICAgIGN5Y2xlc1BlckZyYW1lIC89IDI7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5zZXRDeWNsZXNQZXJGcmFtZShjeWNsZXNQZXJGcmFtZSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoIGluc3RhbmNlICYmIE9iamVjdC5rZXlzKGtleXMpLmluY2x1ZGVzKGUua2V5Q29kZS50b1N0cmluZygpKSApXG4gICAgICAgICAgaW5zdGFuY2UucHJlc3NLZXkoa2V5c1tlLmtleUNvZGVdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGUgPT4ge1xuICAgIGlmICggaW5zdGFuY2UgJiYgT2JqZWN0LmtleXMoa2V5cykuaW5jbHVkZXMoZS5rZXlDb2RlLnRvU3RyaW5nKCkpIClcbiAgICAgIGluc3RhbmNlLnJlbGVhc2VLZXkoa2V5c1tlLmtleUNvZGVdKTtcbiAgfSk7XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmtleWJvYXJkIGJ1dHRvbicpLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHtcbiAgICAgIGluc3RhbmNlLnByZXNzS2V5KGJ1dHRvbi5kYXRhc2V0LnZhbHVlKTtcbiAgICB9LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKCkgPT4ge1xuICAgICAgaW5zdGFuY2UucmVsZWFzZUtleShidXR0b24uZGF0YXNldC52YWx1ZSk7XG4gICAgfSwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGxheVNvdW5kOiAocGxheWluZ1BhdHRlcm4sIHBhdHRlcm4sIHBpdGNoKSA9PiB7XG4gICAgaWYgKCBwbGF5aW5nUGF0dGVybiApIHtcbiAgICAgIC8vIFBsYXkgWE8tQ2hpcCBgcGF0dGVybmAgYXQgYHBpdGNoYFxuICAgICAgQmxlZXBzLmluc3RhbmNlKCkuc2V0VG9Tb3VuZChwYXR0ZXJuLCBwaXRjaCk7XG4gICAgICBCbGVlcHMuaW5zdGFuY2UoKS5zZXRWb2x1bWUoMC4wMDAzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUGxheSBhIHJlZ3VsYXIgb2xkIENISVAtOCBcImJlZXBcIlxuICAgICAgQmxlZXBzLmluc3RhbmNlKCkuc2V0VG9CbGVlcCgpO1xuICAgICAgQmxlZXBzLmluc3RhbmNlKCkuc2V0Vm9sdW1lKDAuMSk7XG4gICAgfVxuICB9LFxuICBzdG9wU291bmQ6ICgpID0+IHtcbiAgICBCbGVlcHMuaW5zdGFuY2UoKS5zZXRWb2x1bWUoMCk7XG4gIH1cbn07XG5cbmNsYXNzIEJsZWVwcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2F1ZGlvQ3R4ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQgfHwgd2luZG93LmF1ZGlvQ29udGV4dCk7XG5cbiAgICB0aGlzLl9vc2NpbGxhdG9yID0gdGhpcy5fYXVkaW9DdHguY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgIHRoaXMuX2dhaW5Ob2RlID0gdGhpcy5fYXVkaW9DdHguY3JlYXRlR2FpbigpO1xuICAgIHRoaXMuX29zY2lsbGF0b3IuY29ubmVjdCh0aGlzLl9nYWluTm9kZSk7XG4gICAgdGhpcy5fZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLl9hdWRpb0N0eC5kZXN0aW5hdGlvbik7XG5cbiAgICB0aGlzLnNldFZvbHVtZSgwKTtcbiAgICB0aGlzLl9vc2NpbGxhdG9yLnN0YXJ0KCk7XG4gIH1cblxuICBzZXRWb2x1bWUoZ2Fpbikge1xuICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4udmFsdWUgPSBnYWluO1xuICB9XG5cbiAgc2V0VG9CbGVlcCgpIHtcbiAgICB0aGlzLl9vc2NpbGxhdG9yLmZyZXF1ZW5jeS52YWx1ZSA9IDYwMDtcbiAgICB0aGlzLl9vc2NpbGxhdG9yLnR5cGUgPSAndHJpYW5nbGUnO1xuICB9XG5cbiAgc2V0VG9Tb3VuZChwYXR0ZXJuLCBwaXRjaCkge1xuICAgIC8vIEhvbmVzdGx5LCBJIGhhZCBubyBpZGVhIGhvdyB0byBnbyBmcm9tIGEgcGF0dGVybiBhbmQgYSBwaXRjaCB0byBzb21lXG4gICAgLy8gc291bmQgaW4gdGhlIGJyb3dzZXIuIEx1Y2tpbHkgS291emVydSByZWFjaGVkIG91dCBhbmQgaGVscGVkIG1lIGJ5XG4gICAgLy8gc3VwcGx5aW5nIHRoZSBGRlQgbWFnaWMgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIGNsYXNzISBUaGFua3Mgc28gbXVjaCFcbiAgICB0aGlzLl9vc2NpbGxhdG9yLnNldFBlcmlvZGljV2F2ZShcbiAgICAgIHRoaXMuX3BlcmlvZGljV2F2ZSh0aGlzLl9wYXR0ZXJuVG9CaXRzKHBhdHRlcm4pKVxuICAgICk7XG4gICAgLy8gMTI4IGlzIGEgbWFnaWMgbnVtYmVyIPCfqoQsIGRpc2NvdmVyZWQgYnkgdHJpYWwgYW5kIGVycm9yLCBjb21wYXJpbmcgdGhlXG4gICAgLy8gc291bmQgdG8gT2N0byBhbmQgYSBsaXR0bGUgZWR1Y2F0ZWQgZ3Vlc3N3b3JrLiBJdCBtYXRjaGVzIHRoZSBudW1iZXIgb2ZcbiAgICAvLyBvbmUtYml0IHNhbXBsZXMgaW4gMTYgYnl0ZXMsIHdoaWNoIGlzIHdoeSB3ZSB0aGluayBpdCdzIGNvcnJlY3QuXG4gICAgdGhpcy5fb3NjaWxsYXRvci5mcmVxdWVuY3kudmFsdWUgPSBwaXRjaCAvIDEyODtcbiAgfVxuXG4gIC8vIEV4dGVuZCB0aGUgcGF0dGVybiB0byBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGJpdHMsIHF1YWRydXBsaW5nIGVhY2ggYml0IHRvXG4gIC8vIGdldCBhIG5pY2VyIHNxdWFyZSB3YXZlXG4gIF9wYXR0ZXJuVG9CaXRzKHBhdHRlcm4pIHtcbiAgICBjb25zdCBiaXRzID0gbmV3IEZsb2F0MzJBcnJheSg1MTIpO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKCBjb25zdCBieXRlIG9mIHBhdHRlcm4gKSB7XG4gICAgICBsZXQgbWFzayA9IDEyODtcbiAgICAgIHdoaWxlICggbWFzayAhPSAwICkge1xuICAgICAgICBjb25zdCB2YWwgPSAoYnl0ZSAmIG1hc2spICE9IDAgPyAxIDogMDtcbiAgICAgICAgYml0c1tpKytdID0gdmFsO1xuICAgICAgICBiaXRzW2krK10gPSB2YWw7XG4gICAgICAgIGJpdHNbaSsrXSA9IHZhbDtcbiAgICAgICAgYml0c1tpKytdID0gdmFsO1xuICAgICAgICBtYXNrID4+PSAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYml0cztcbiAgfVxuXG4gIC8vIENvbnZlcnQgdGhlIGJpdCBwYXR0ZXJuIHRvIGEgd2F2ZSB0aGF0IG1ha2VzIHNlbnNlIHRvIHRoZSBvc2NpbGxhdG9yXG4gIF9wZXJpb2RpY1dhdmUoc2FtcGxlc1IpIHtcbiAgICB2YXIgc2FtcGxlc0kgPSBuZXcgRmxvYXQzMkFycmF5KHNhbXBsZXNSLmxlbmd0aCk7XG4gICAgdmFyIEZGVHJlc3VsdCA9IHRoaXMuX0ZGVChzYW1wbGVzUiwgc2FtcGxlc0kpO1xuICAgIHJldHVybiB0aGlzLl9hdWRpb0N0eC5jcmVhdGVQZXJpb2RpY1dhdmUoXG4gICAgICBGRlRyZXN1bHRbMF0uc2xpY2UoMCxGRlRyZXN1bHRbMF0ubGVuZ3RoLzIpLFxuICAgICAgRkZUcmVzdWx0WzFdLnNsaWNlKDAsRkZUcmVzdWx0WzFdLmxlbmd0aC8yKSxcbiAgICAgIHsgZGlzYWJsZU5vcm1hbGl6YXRpb246IHRydWUgfVxuICAgICk7XG4gIH1cblxuICAvLyBGYXN0IEZvdXJpZXIgVHJhbnNmb3JtLCBpbXBsZW1lbnRlZCBpbiBKYXZhU2NyaXB0IGJ5IEtvdXplcnVcbiAgLy8gKGh0dHBzOi8vZ2l0aHViLmNvbS9Lb3V6ZXJ1KSBiYXNlZCBvbiB0aGUgcHNldWRvY29kZSBpblxuICAvLyBodHRwczovL3lvdXR1LmJlL2g3YXBPN3ExNlYwXG4gIF9GRlQoUixJKSB7XG4gICAgdmFyIG4gPSBSLmxlbmd0aDtcbiAgICBpZiAobiA9PSAxKSByZXR1cm4gW1IsSV07XG4gICAgdmFyIFdyID0gTWF0aC5jb3MoMipNYXRoLlBJL24pO1xuICAgIHZhciBXaSA9IE1hdGguc2luKDIqTWF0aC5QSS9uKTtcbiAgICB2YXIgUEVyID0gbmV3IEZsb2F0MzJBcnJheShuLzIpO1xuICAgIHZhciBQRWkgPSBuZXcgRmxvYXQzMkFycmF5KG4vMik7XG4gICAgdmFyIFBPciA9IG5ldyBGbG9hdDMyQXJyYXkobi8yKTtcbiAgICB2YXIgUE9pID0gbmV3IEZsb2F0MzJBcnJheShuLzIpO1xuICAgIGZvciAodmFyIHogPSAwOyB6PG47IHorKykge1xuICAgICAgaWYgKHomMSkge1xuICAgICAgICBQT3Jbej4+MV0gPSBSW3pdO1xuICAgICAgICBQT2lbej4+MV0gPSBJW3pdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUEVyW3o+PjFdID0gUlt6XTtcbiAgICAgICAgUEVpW3o+PjFdID0gSVt6XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgeWUgPSB0aGlzLl9GRlQoUEVyLFBFaSk7XG4gICAgdmFyIHlvID0gdGhpcy5fRkZUKFBPcixQT2kpO1xuICAgIHZhciB5ZXIgPSB5ZVswXSwgeWVpID0geWVbMV07XG4gICAgdmFyIHlvciA9IHlvWzBdLCB5b2kgPSB5b1sxXTtcbiAgICB2YXIgeXIgPSBuZXcgRmxvYXQzMkFycmF5KG4pO1xuICAgIHZhciB5aSA9IG5ldyBGbG9hdDMyQXJyYXkobik7XG5cbiAgICBmb3IgKHZhciB6ID0gMCwgbSA9IG4vMiwgcCA9IDEsIHEgPSAwLCByID0gMDsgejxtOyB6KyspIHtcbiAgICAgIHZhciBhID0geWVyW3pdLCBiID0geWVpW3pdO1xuICAgICAgdmFyIGMgPSB5b3Jbel0sIGQgPSB5b2lbel07XG4gICAgICB5clt6ICBdID0gYSArIHAqYyAtIHEqZDtcbiAgICAgIHlpW3ogIF0gPSBiICsgcCpkICsgcSpjO1xuICAgICAgeXJbeittXSA9IGEgLSBwKmMgKyBxKmQ7XG4gICAgICB5aVt6K21dID0gYiAtIHAqZCAtIHEqYztcbiAgICAgIHIgPSBwKldyIC0gcSpXaTtcbiAgICAgIHEgPSBwKldpICsgcSpXcjtcbiAgICAgIHA9cjtcbiAgICB9XG4gICAgcmV0dXJuIFt5cix5aV07XG4gIH1cbn1cblxuLy8gU291bmQgbWF5IG9ubHkgcGxheSBhZnRlciBhIFwidXNlciBnZXN0dXJlXCIsIHNvIHdlIGNhbid0IGp1c3QgY3JlYXRlIGEgc2luZ2xlXG4vLyBpbnN0YW5jZSBvZiBCbGVlcHMgb24gcGFnZSBsb2FkLiBTbyB3ZSB1c2UgYSBzaW5nbGV0b24gcGF0dGVybiBoZXJlIGluc3RlYWQsXG4vLyBcImxhenkgbG9hZGluZ1wiIHRoZSBpbnN0YW5jZSBhcyBsYXRlIGFzIHBvc3NpYmxlLlxuQmxlZXBzLmluc3RhbmNlID0gKCkgPT4ge1xuICBpZiAoISFCbGVlcHMuX2luc3RhbmNlKSByZXR1cm4gQmxlZXBzLl9pbnN0YW5jZTtcbiAgcmV0dXJuIEJsZWVwcy5faW5zdGFuY2UgPSBuZXcgQmxlZXBzKCk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQVVUTzogICAgICAwLCAvLyBOb3RlIHRoYXQgdGhpcyBvbmUgaGFsdHMgZm9yIGRpc3BsYXkgcmVmcmVzaCwgdXNlIEJMSU5EVklQXG4gIFZJUDogICAgICAgMSwgLy8gaW5zdGVhZCBmb3IgaGVhZGxlc3MgdGVzdGluZ1xuICBCTElORFZJUDogIDIsXG4gIFNDSElQOiAgICAgMyxcbiAgWE9DSElQOiAgICA0XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8qXG4gKiBUaGlzIGNsYXNzIGluc3RhbGxzIG9uZSBzaW5nbGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgd2hvbGUgZG9jdW1lbnQsIGFuZFxuICogZXZhbHVhdGVzIHdoaWNoIGNhbGxiYWNrIHRvIGNhbGwgYXQgY2xpY2sgdGltZSwgYmFzZWQgb24gdGhlIGVsZW1lbnQgdGhhdCBoYXNcbiAqIGJlZW4gY2xpY2tlZC4gVGhpcyBhbGxvd3MgdXMgdG8gc3dhcCBvdXQgYW5kIHJlcmVuZGVyIHdob2xlIHNlY3Rpb25zIG9mIHRoZVxuICogRE9NIHdpdGhvdXQgaGF2aW5nIHRvIHJlaW5zdGFsbCBhIGJ1bmNoIG9mIGNsaWNrIGhhbmRsZXJzIGVhY2ggdGltZS4gVGhpc1xuICogbmljZWx5IGRlY291cGxlcyB0aGUgcmVuZGVyIGxvZ2ljIGZyb20gdGhlIGNsaWNrIGV2ZW50IG1hbmFnZW1lbnQgbG9naWMuXG4gKlxuICogVG8gbWFrZSBzdXJlIHdlIHJlYWxseSBvbmx5IGluc3RhbGwgYSBzaW5nbGUgY2xpY2sgaGFuZGxlciwgeW91IGNhbiB1c2UgdGhlXG4gKiBzaW5nbGV0b24gcGF0dGVybiBhbmQgYXNrIGZvciBgQ2xpY2suaW5zdGFuY2UoKWAgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ld1xuICogb2JqZWN0LlxuICovXG5cbmNsYXNzIENsaWNrIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9oYW5kbGVycyA9IHt9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAgICAgKGUpID0+IHRoaXMuX2NhbGxIYW5kbGVyKCdjbGljaycsICAgICBlKSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHRoaXMuX2NhbGxIYW5kbGVyKCdtb3VzZWRvd24nLCBlKSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgKGUpID0+IHRoaXMuX2NhbGxIYW5kbGVyKCdtb3VzZXVwJywgICBlKSk7XG4gIH1cblxuICByZWdpc3RlcihzZWxlY3RvciwgaGFuZGxlcnMgPSB7Y2xpY2s6IG51bGwsIG1vdXNlZG93bjogbnVsbCwgbW91c2V1cDogbnVsbH0pIHtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXJzID09ICdmdW5jdGlvbicpIGhhbmRsZXJzID0geyBjbGljazogaGFuZGxlcnMgfTtcbiAgICB0aGlzLl9oYW5kbGVyc1tzZWxlY3Rvcl0gPSB0aGlzLl9oYW5kbGVyc1tzZWxlY3Rvcl0gfHwgW107XG4gICAgdGhpcy5faGFuZGxlcnNbc2VsZWN0b3JdLnB1c2goaGFuZGxlcnMpO1xuICB9XG5cbiAgX2NhbGxIYW5kbGVyKHR5cGUsIGUpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9oYW5kbGVycykuZm9yRWFjaCgoc2VsZWN0b3IpID0+IHtcbiAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KHNlbGVjdG9yKSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuX2hhbmRsZXJzW3NlbGVjdG9yXS5tYXAoKGgpID0+IGhbdHlwZV0pO1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKChoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09ICdmdW5jdGlvbicgJiYgIWUuZGVmYXVsdFByZXZlbnRlZClcbiAgICAgICAgICAgIGhhbmRsZXIoZSwgc2VsZWN0b3IpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cblxuQ2xpY2suaW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCEhQ2xpY2suX2luc3RhbmNlKSByZXR1cm4gQ2xpY2suX2luc3RhbmNlO1xuICByZXR1cm4gQ2xpY2suX2luc3RhbmNlID0gbmV3IENsaWNrKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsaWNrO1xuIiwiLypcbiAqIFRoaXMgY2xhc3MgaW5zdGFsbHMgc2luZ2xlIGRyYWcgZXZlbnQgaGFuZGxlcnMgb24gdGhlIHdob2xlIGRvY3VtZW50LCBhbmRcbiAqIGV2YWx1YXRlcyB3aGljaCBlbGVtZW50IHRoZXkgaW5mbHVlbmNlIGF0IGRyYWcgdGltZS4gSWYgeW91IGRyb3AgYSBmaWxlIHRoZVxuICogcmVsZXZhbnQgY2FsbGJhY2sgZ2V0cyBjYWxsZWQsIGJhc2VkIG9uIHRoZSBlbGVtZW50IHRoYXQgdGhlIGZpbGUgd2FzIGRyb3BwZWRcbiAqIG9uLiBUaGlzIGFsbG93cyB1cyB0byBzd2FwIG91dCBhbmQgcmVyZW5kZXIgd2hvbGUgc2VjdGlvbnMgb2YgdGhlIERPTSB3aXRob3V0XG4gKiBoYXZpbmcgdG8gcmVpbnN0YWxsIGEgYnVuY2ggb2YgZXZlbnQgaGFuZGxlcnMgZWFjaCB0aW1lLiBUaGlzIG5pY2VseVxuICogZGVjb3VwbGVzIHRoZSByZW5kZXIgbG9naWMgZnJvbSB0aGUgZHJhZyBldmVudCBtYW5hZ2VtZW50IGxvZ2ljLlxuICpcbiAqIFRvIG1ha2Ugc3VyZSB3ZSByZWFsbHkgb25seSBpbnN0YWxsIHNpbmdsZSBoYW5kbGVycywgeW91IGNhbiB1c2UgdGhlXG4gKiBzaW5nbGV0b24gcGF0dGVybiBhbmQgYXNrIGZvciBgRmlsZVRhcmdldC5pbnN0YW5jZSgpYCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3XG4gKiBvYmplY3QuXG4gKi9cblxuaW1wb3J0IENsaWNrIGZyb20gJy4vY2xpY2snO1xuXG5jbGFzcyBGaWxlVGFyZ2V0IHtcblxuICBjb25zdHJ1Y3RvcihkcmFnQ2xhc3MgPSAnZHJhZ2dpbmcnKSB7XG4gICAgdGhpcy5fZHJhZ0NsYXNzID0gZHJhZ0NsYXNzO1xuICAgIHRoaXMuX2hhbmRsZXJzICA9IHt9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCAgKGUpID0+IHRoaXMuX2RyYWdPdmVyKGUpKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCAoZSkgPT4gdGhpcy5fZHJhZ0xlYXZlKGUpKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgICAgICAoZSkgPT4gdGhpcy5fZHJvcChlKSk7XG4gIH1cblxuICByZWdpc3RlcihzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgICB0aGlzLl9oYW5kbGVyc1tzZWxlY3Rvcl0gPSBjYWxsYmFjaztcbiAgICBDbGljay5pbnN0YW5jZSgpLnJlZ2lzdGVyKHNlbGVjdG9yLCAoZSwgcykgPT4gdGhpcy5fb3BlbkZpbGVEaWFsb2coZSwgcykpO1xuICB9XG5cbiAgX2RyYWdPdmVyKGUpIHtcbiAgICBpZiAoIXRoaXMuX2lzRHJvcFRhcmdldChlLnRhcmdldCkpIHJldHVybjtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ2NvcHknO1xuICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQodGhpcy5fZHJhZ0NsYXNzKTtcbiAgfVxuXG4gIF9kcmFnTGVhdmUoZSkge1xuICAgIGlmICghdGhpcy5faXNEcm9wVGFyZ2V0KGUudGFyZ2V0KSkgcmV0dXJuO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZHJhZ0NsYXNzKTtcbiAgfVxuXG4gIF9kcm9wKGUpIHtcbiAgICBsZXQgc2VsZWN0b3IgPSB0aGlzLl9pc0Ryb3BUYXJnZXQoZS50YXJnZXQpO1xuICAgIGlmICghc2VsZWN0b3IpIHJldHVybjtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2RyYWdDbGFzcyk7XG4gICAgdGhpcy5faGFuZGxlRmlsZShzZWxlY3RvciwgZSwgZS5kYXRhVHJhbnNmZXIuZmlsZXNbMF0pO1xuICB9XG5cbiAgX2lzRHJvcFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faGFuZGxlcnMpLmZpbmQoKHNlbGVjdG9yKSA9PiB7XG4gICAgICBpZiAodGFyZ2V0LmNsb3Nlc3Qoc2VsZWN0b3IpKSByZXR1cm4gc2VsZWN0b3I7XG4gICAgfSkgfHwgZmFsc2U7XG4gIH1cblxuICBfb3BlbkZpbGVEaWFsb2coZSwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXQudHlwZSAgPSAnZmlsZSc7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGMpID0+XG4gICAgICB0aGlzLl9oYW5kbGVGaWxlKHNlbGVjdG9yLCBlLCBjLnRhcmdldC5maWxlc1swXSlcbiAgICApO1xuICAgIGlucHV0LmNsaWNrKCk7XG4gIH1cblxuICBfaGFuZGxlRmlsZShzZWxlY3RvciwgZSwgZmlsZSkge1xuICAgIHRoaXMuX3JlYWRGaWxlKGZpbGUpXG4gICAgICAgIC50aGVuKChyKSA9PiB0aGlzLl9oYW5kbGVyc1tzZWxlY3Rvcl0oZmlsZSwgciwgZSkpO1xuICB9XG5cbiAgX3JlYWRGaWxlKGZpbGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIChlKSA9PiByZXNvbHZlKGUudGFyZ2V0LnJlc3VsdCkpO1xuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgfSk7XG4gIH1cblxufVxuXG5GaWxlVGFyZ2V0Lmluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gIGlmICghIUZpbGVUYXJnZXQuX2luc3RhbmNlKSByZXR1cm4gRmlsZVRhcmdldC5faW5zdGFuY2U7XG4gIHJldHVybiBGaWxlVGFyZ2V0Ll9pbnN0YW5jZSA9IG5ldyBGaWxlVGFyZ2V0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVUYXJnZXQ7XG4iLCIvKipcbiAqIFRoaXMgaXMgYSB2ZXJ5IHNpbXBsZSByb3V0aW5nIGNsYXNzIHRoYXQgbGlzdGVucyB0byBsb2NhdGlvbiBoYXNoIGNoYW5nZXMgYW5kXG4gKiBjbGlja3Mgb24gbGlua3MgdG8gcmVnaXN0ZXJlZCByb3V0ZXMuXG4gKlxuICogWW91IGhhdmUgdG8gZXhwbGljaXRseSBkZWZpbmUgdGhlIHJvdXRlcyB0aGF0IHlvdSB3aXNoIHRvIHVzZSwgc28gd2UgZG9uJ3RcbiAqIGNsYXNoICh0b28gbXVjaCkgd2l0aCBkZWVwLWxpbmtpbmcgdG8gbmFtZWQgYW5jaG9ycyBvbiB5b3VyIHBhZ2UuIEFuZCBhbHNvXG4gKiBiZWNhdXNlIGl0IGVuYWJsZXMgeW91IHRvIGhhbmRsZSBkaWZmZXJlbnQgcm91dGVzIHdpdGggZGlmZmVyZW50IGZ1bmN0aW9ucy5cbiAqL1xuXG5pbXBvcnQgQ2xpY2sgZnJvbSAnLi9jbGljayc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7XG5cbiAgY29uc3RydWN0b3Iocm91dGVzID0gZmFsc2UsIGhhbmRsZXIgPSBudWxsKSB7XG4gICAgdGhpcy5fcm91dGVzID0gW107XG4gICAgaWYgKHJvdXRlcykgdGhpcy5hZGRSb3V0ZXMocm91dGVzLCBoYW5kbGVyKTtcbiAgfVxuXG4gIGluc3RhbGwoKSB7XG4gICAgQ2xpY2suaW5zdGFuY2UoKS5yZWdpc3RlcignYVtocmVmXScsICAoZSkgPT4gdGhpcy5faGFuZGxlQ2xpY2soZSkpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgKGUpID0+IHRoaXMuX2hhbmRsZU5hdmlnYXRpb25FdmVudChlKSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAgICAgICAoZSkgPT4gdGhpcy5faGFuZGxlTmF2aWdhdGlvbkV2ZW50KGUpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFJvdXRlKHJvdXRlLCBoYW5kbGVyKSB7XG4gICAgdGhpcy5fcm91dGVzLnB1c2goW3JvdXRlLCBoYW5kbGVyXSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRSb3V0ZXMocm91dGVzLCBoYW5kbGVyID0gbnVsbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJvdXRlcykpXG4gICAgICByb3V0ZXMuZm9yRWFjaCgocm91dGUpID0+IHRoaXMuYWRkUm91dGUocm91dGUsIGhhbmRsZXIpKTtcbiAgICBlbHNlXG4gICAgICBPYmplY3Qua2V5cyhyb3V0ZXMpLmZvckVhY2gocm91dGUgPT4gdGhpcy5hZGRSb3V0ZShyb3V0ZSwgcm91dGVzW3JvdXRlXSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcm91dGUocm91dGUsIGV2bnQpIHtcbiAgICBjb25zdCBtYXRjaCA9IHRoaXMuX21hdGNoaW5nUm91dGUocm91dGUpO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaC5yb3V0ZXIpICByZXR1cm4gbWF0Y2gucm91dGVyLnJvdXRlKG1hdGNoLnN1YnBhdGgsIGV2bnQpO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaC5oYW5kbGVyKSByZXR1cm4gbWF0Y2guaGFuZGxlcihtYXRjaC5yb3V0ZSwgbWF0Y2gubWF0Y2hlcywgZXZudCk7XG4gIH1cblxuICBfaGFuZGxlQ2xpY2soZXZudCkge1xuICAgIGxldCBsaW5rID0gZXZudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgaWYgKCFsaW5rLnN0YXJ0c1dpdGgoJyMnKSkgcmV0dXJuOyAgICAgICAvLyBPbmx5IGhhbmRsZSBoYXNoIGxpbmtzXG4gICAgbGluayA9IGxpbmsuc3Vic3RyKDEpO1xuICAgIGlmICghdGhpcy5fbWF0Y2hpbmdSb3V0ZShsaW5rKSkgcmV0dXJuOyAgLy8gT25seSBoYW5kbGUgcmVnaXN0ZXJlZCByb3V0ZXNcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGxpbms7XG4gICAgZXZudC5wcmV2ZW50RGVmYXVsdCgpOyAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGZyb20ganVtcGluZyB0byBhbmNob3JcbiAgfVxuXG4gIF9oYW5kbGVOYXZpZ2F0aW9uRXZlbnQoZXZudCkge1xuICAgIGxldCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2hcbiAgICBpZiAoaGFzaC5zdGFydHNXaXRoKCcjJykpIGhhc2ggPSBoYXNoLnN1YnN0cigxKTtcbiAgICB0aGlzLnJvdXRlKGhhc2gsIGV2bnQpO1xuICB9XG5cbiAgX21hdGNoaW5nUm91dGUocm91dGUpIHtcbiAgICByZXR1cm4gcm91dGUgJiYgKCB0aGlzLl9zdWJSb3V0ZXJNYXRjaChyb3V0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmdNYXRjaChyb3V0ZSkgICAgfHxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWdFeHBNYXRjaChyb3V0ZSkgICAgICAgKTtcbiAgfVxuXG4gIF9zdWJSb3V0ZXJNYXRjaChyb3V0ZSkge1xuICAgIGNvbnN0IG1hdGNoID0gdGhpcy5fcm91dGVzLmZpbHRlcihyID0+IHJbMV0gaW5zdGFuY2VvZiBSb3V0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZChyID0+IHJvdXRlLnN0YXJ0c1dpdGgoclswXSArICcvJykgfHwgcm91dGUgPT0gclswXSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggJiYge1xuICAgICAgcm91dGVyOiAgbWF0Y2hbMV0sXG4gICAgICBzdWJwYXRoOiByb3V0ZS5zdWJzdHIobWF0Y2hbMF0ubGVuZ3RoICsgMSlcbiAgICB9O1xuICB9XG5cbiAgX3N0cmluZ01hdGNoKHJvdXRlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0aGlzLl9yb3V0ZXMuZmluZChyID0+IHJvdXRlID09IHJbMF0pO1xuXG4gICAgcmV0dXJuIG1hdGNoICYmIHtcbiAgICAgIHJvdXRlOiAgIG1hdGNoWzBdLFxuICAgICAgaGFuZGxlcjogbWF0Y2hbMV1cbiAgICB9O1xuICB9XG5cbiAgX3JlZ0V4cE1hdGNoKHJvdXRlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0aGlzLl9yb3V0ZXMuZmlsdGVyKHIgPT4gclswXSBpbnN0YW5jZW9mIFJlZ0V4cClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKHIgPT4gcm91dGUubWF0Y2goclswXSkpO1xuXG4gICAgcmV0dXJuIG1hdGNoICYmIHtcbiAgICAgIHJvdXRlOiAgIG1hdGNoWzBdLFxuICAgICAgaGFuZGxlcjogbWF0Y2hbMV0sXG4gICAgICBtYXRjaGVzOiByb3V0ZS5tYXRjaChtYXRjaFswXSlcbiAgICB9O1xuICB9XG5cbn1cbiIsImltcG9ydCBDbGljayAgICAgIGZyb20gJy4vY2xpY2snO1xuaW1wb3J0IEZpbGVUYXJnZXQgZnJvbSAnLi9maWxldGFyZ2V0JztcbmltcG9ydCBSb3V0ZXIgICAgIGZyb20gJy4vcm91dGVyJztcbmltcG9ydCBFbmVyZ2l6ZSAgIGZyb20gJy4vZW5lcmdpemUnO1xuXG5jb25zdCBUaGltYmxlZnVsID0ge1xuICBDbGljaywgRmlsZVRhcmdldCwgUm91dGVyLCBFbmVyZ2l6ZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGhpbWJsZWZ1bDtcbndpbmRvdy5UaGltYmxlZnVsID0gVGhpbWJsZWZ1bDtcbiIsIi8qKlxuICogR2l2ZW4gYSBzY29wZSB0aGlzIGNsYXNzIGFkZHMgYSBidW5jaCBvZiBiZWhhdmlvdXIgdG8gZWxlbWVudHMgdGhhdFxuICogeW91IGRlZmluZSB0aHJvdWdoIGRhdGEgYXR0cmlidXRlcy4gVGhpcyBiZWhhdmlvdXIgaXMgYmFzZWQgYXJvdW5kIGFkZGluZ1xuICogb3IgcmVtb3ZpbmcgYW4gJ2FjdGl2ZScgY2xhc3Mgd2hlbiBlbGVtZW50cyBhcmUgY2xpY2tlZDpcbiAqXG4gKiAgLSBkYXRhLW9wZW4g4oCUIEEgc2VsZWN0b3IgdG8gcHV0IHRoZSAnYWN0aXZlJyBjbGFzcyBvbiB3aGVuIGNsaWNrZWRcbiAqICAtIGRhdGEtY2xvc2Ug4oCUIEEgc2VsZWN0b3IgdG8gcmVtb3ZlIHRoZSAnYWN0aXZlJyBjbGFzcyBmcm9tIHdoZW4gY2xpY2tlZFxuICogIC0gZGF0YS10b2dnbGUg4oCUIEEgc2VsZWN0b3IgdG8gdG9nZ2xlIHRoZSAnYWN0aXZlJyBjbGFzcyBvbiB3aGVuIGNsaWNrZWRcbiAqICAtIGRhdGEtZ3JvdXAg4oCUIElmIEkgZ2V0IHRoZSAnYWN0aXZlJyBjbGFzcywgcmVtb3ZlIGl0IGZyb20gb3RoZXJzIGluIG15IGdyb3VwXG4gKiAgLSBkYXRhLXRpbWVyIOKAlCBJZiBJIGdldCB0aGUgJ2FjdGl2ZScgY2xhc3MsIHJlbW92ZSBpdCBhZ2FpbiBhZnRlciB0aGlzIG1hbnkgbWlsbGlzZWNvbmRzXG4gKiAgLSBkYXRhLWZvbGxvd2VyIOKAlCBBIHNlbGVjdG9yIGZvciBhbm90aGVyIGVsZW1lbnQgdGhhdCBmb2xsb3dzIG15IGJlaGF2aW91clxuICpcbiAqIElmIHlvdSB3aXNoLCB5b3UgY2FuIG92ZXJyaWRlIHRoZSBjbGFzcyBuYW1lIGFuZCB0aGUgbmFtZXMgb2YgYWxsIHRoZVxuICogYXR0cmlidXRlcyBhcyBvcHRpb25zIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuXG5pbXBvcnQgQ2xpY2sgZnJvbSAnLi9jbGljayc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZXJnaXplIHtcblxuICBjb25zdHJ1Y3RvcihzY29wZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5fc2NvcGUgICA9IHNjb3BlO1xuICAgIHRoaXMuX29wdGlvbnMgPSB0aGlzLl9ub3JtYWxpemVPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgQ2xpY2suaW5zdGFuY2UoKS5yZWdpc3RlcihgJHtzY29wZX0gWyR7dGhpcy5fb3B0aW9ucy5vcGVufV0sICR7c2NvcGV9IFske3RoaXMuX29wdGlvbnMuY2xvc2V9XSwgJHtzY29wZX0gWyR7dGhpcy5fb3B0aW9ucy50b2dnbGV9XWAsIChlKSA9PiB0aGlzLl9oYW5kbGVDbGljayhlKSk7XG4gIH1cblxuICBfbm9ybWFsaXplT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgY2xhc3M6ICAgICdhY3RpdmUnLFxuICAgICAgb3BlbjogICAgICdkYXRhLW9wZW4nLFxuICAgICAgY2xvc2U6ICAgICdkYXRhLWNsb3NlJyxcbiAgICAgIHRvZ2dsZTogICAnZGF0YS10b2dnbGUnLFxuICAgICAgZ3JvdXA6ICAgICdkYXRhLWdyb3VwJyxcbiAgICAgIHRpbWVyOiAgICAnZGF0YS10aW1lcicsXG4gICAgICBmb2xsb3dlcjogJ2RhdGEtZm9sbG93ZXInXG4gICAgfSwgb3B0aW9ucyk7XG4gIH1cblxuICBfaGFuZGxlQ2xpY2soZXZudCkge1xuICAgIC8vIFdoaWNoIGVsZW1lbnQgZGlkIHdlIGNsaWNrP1xuICAgIGNvbnN0IHRhcmdldCA9IGV2bnQudGFyZ2V0LmNsb3Nlc3QoYFske3RoaXMuX29wdGlvbnMub3Blbn1dLCBbJHt0aGlzLl9vcHRpb25zLmNsb3NlfV0sIFske3RoaXMuX29wdGlvbnMudG9nZ2xlfV1gKTtcblxuICAgIC8vIFdoYXQgZG9lcyB0aGUgY2xpY2tlZCBlbGVtZW50IHdpc2ggdG8gb3BlbiwgY2xvc2Ugb3IgdG9nZ2xlP1xuICAgIGNvbnN0IGNsb3NlU2VsZWN0b3IgID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLl9vcHRpb25zLmNsb3NlKTtcbiAgICBjb25zdCBvcGVuU2VsZWN0b3IgICA9IHRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5fb3B0aW9ucy5vcGVuKTtcbiAgICBjb25zdCB0b2dnbGVTZWxlY3RvciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5fb3B0aW9ucy50b2dnbGUpO1xuXG4gICAgbGV0IGNsb3NlRWxlbWVudHMgPSBjbG9zZVNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHt0aGlzLl9zY29wZX0gJHtjbG9zZVNlbGVjdG9yfWApICA6IFtdO1xuICAgIGxldCBvcGVuRWxlbWVudHMgID0gIG9wZW5TZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7dGhpcy5fc2NvcGV9ICR7b3BlblNlbGVjdG9yfWApICAgOiBbXTtcblxuICAgIC8vIEFkZCBlbGVtZW50cyB0aGF0IG5lZWQgdG8gYmUgdG9nZ2xlZFxuICAgIGNsb3NlRWxlbWVudHMgPSBbLi4uY2xvc2VFbGVtZW50cywgLi4uKHRvZ2dsZVNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHt0aGlzLl9zY29wZX0gJHt0b2dnbGVTZWxlY3Rvcn0uJHt0aGlzLl9vcHRpb25zLmNsYXNzfWApICAgICAgIDogW10pXTtcbiAgICBvcGVuRWxlbWVudHMgID0gWy4uLm9wZW5FbGVtZW50cywgIC4uLih0b2dnbGVTZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7dGhpcy5fc2NvcGV9ICR7dG9nZ2xlU2VsZWN0b3J9Om5vdCguJHt0aGlzLl9vcHRpb25zLmNsYXNzfSlgKSA6IFtdKV07XG5cbiAgICB0aGlzLl9jbG9zZShjbG9zZUVsZW1lbnRzKTtcbiAgICB0aGlzLl9vcGVuKG9wZW5FbGVtZW50cyk7XG5cbiAgICAvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBldmVudCwgZG9uJ3QgdHJ5IHRvIGV2YWx1YXRlIGl0IGFueSBmdXJ0aGVyXG4gICAgZXZudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2bnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBfY2xvc2UoZWxlbWVudHMpIHtcbiAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fb3B0aW9ucy5jbGFzcyk7XG4gICAgICB0aGlzLl9jbG9zZSh0aGlzLl9mb2xsb3dlcnMoZWxlbWVudCkpO1xuICAgIH0pO1xuICB9XG5cbiAgX29wZW4oZWxlbWVudHMpIHtcbiAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLl9jbG9zZSh0aGlzLl9ncm91cChlbGVtZW50KSk7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fb3B0aW9ucy5jbGFzcyk7XG4gICAgICB0aGlzLl9vcGVuKHRoaXMuX2ZvbGxvd2VycyhlbGVtZW50KSk7XG5cbiAgICAgIC8vIFNldCBzZWxmLWRlc3RydWN0IHRpbWVyIGlmIG5lZWRlZFxuICAgICAgY29uc3QgZGVsYXkgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSh0aGlzLl9vcHRpb25zLnRpbWVyKTtcbiAgICAgIGlmIChkZWxheSkgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5fY2xvc2UoW2VsZW1lbnRdKSwgZGVsYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgX2dyb3VwKGVsZW1lbnQpIHtcbiAgICBjb25zdCBncm91cCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKHRoaXMuX29wdGlvbnMuZ3JvdXApO1xuICAgIGlmICghZ3JvdXApIHJldHVybiBbXTtcbiAgICByZXR1cm4gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7dGhpcy5fc2NvcGV9IFske3RoaXMuX29wdGlvbnMuZ3JvdXB9PSR7Z3JvdXB9XWApXTtcbiAgfVxuXG4gIF9mb2xsb3dlcnMoZWxlbWVudCkge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUodGhpcy5fb3B0aW9ucy5mb2xsb3dlcik7XG4gICAgaWYgKCFzZWxlY3RvcikgcmV0dXJuIFtdO1xuICAgIHJldHVybiBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHt0aGlzLl9zY29wZX0gJHtzZWxlY3Rvcn1gKV07XG4gIH1cblxufVxuIiwiaW1wb3J0IFRoaW1ibGVmdWwgZnJvbSAndGhpbWJsZWZ1bCc7XG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uL3NoYXJlZC90eXBlcycpO1xuXG5pbXBvcnQgd2VsY29tZSBmcm9tIFwiISFiaW5hcnktbG9hZGVyIS4vd2VsY29tZS5jaDhcIjtcbmNvbnN0IHdlbGNvbWVQcm9ncmFtID0gbmV3IFVpbnQ4QXJyYXkod2VsY29tZS5sZW5ndGgpO1xuZm9yIChsZXQgaSA9IDA7IGkgPCB3ZWxjb21lLmxlbmd0aDsgaSsrKVxuICB3ZWxjb21lUHJvZ3JhbVtpXSA9IHdlbGNvbWUuY2hhckNvZGVBdChpKTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IEVtdWxhdG9yID0gcmVxdWlyZSgnLi9lbXVsYXRvcicpO1xuICBjb25zdCBrZXlib2FyZCA9IHJlcXVpcmUoJy4va2V5Ym9hcmQnKTtcbiAgY29uc3QgZ2FtZXBhZCA9IHJlcXVpcmUoJy4vZ2FtZXBhZCcpO1xuICBjb25zdCBzZXR0aW5ncyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MnKTtcbiAgY29uc3QgZGlzcGxheSA9IHJlcXVpcmUoJy4vZGlzcGxheScpO1xuICBjb25zdCB7IHBsYXlTb3VuZCwgc3RvcFNvdW5kIH0gPSByZXF1aXJlKCcuL3NvdW5kJyk7XG5cbiAgY29uc3QgaW5zdGFuY2UgPSBuZXcgRW11bGF0b3IoeyBkaXNwbGF5LCBwbGF5U291bmQsIHN0b3BTb3VuZCB9KTtcbiAgYXdhaXQgaW5zdGFuY2UuaW5pdCgpO1xuICBrZXlib2FyZChpbnN0YW5jZSk7XG4gIGdhbWVwYWQoaW5zdGFuY2UpO1xuICBjb25zdCBzaG93U2V0dGluZ3MgPSBzZXR0aW5ncyhpbnN0YW5jZSk7XG5cbiAgaW5zdGFuY2UubG9hZFByb2dyYW0odHlwZXMuQVVUTywgd2VsY29tZVByb2dyYW0pO1xuICBpbnN0YW5jZS5zdGFydCgpO1xuXG4gIGNvbnN0IGZpbGVUYXJnZXQgPSBUaGltYmxlZnVsLkZpbGVUYXJnZXQuaW5zdGFuY2UoKTtcbiAgZmlsZVRhcmdldC5yZWdpc3RlcignI2Rpc3BsYXknLCAoZmlsZSwgZGF0YSkgPT4ge1xuICAgIGlmICggZmlsZS5uYW1lLnN1YnN0cigtNCkgIT0gJy5jaDgnIClcbiAgICAgIHJldHVybiBhbGVydCgnWW91IGNhbiBvbmx5IGxvYWQgKi5jaDggQ0hJUC04IFJPTXMnKTtcbiAgICBkYXRhID0gYXRvYihkYXRhLnNwbGl0KCcsJylbMV0pO1xuICAgIGNvbnN0IHByb2dyYW0gPSBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoZGF0YS5sZW5ndGgpKTtcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrIClcbiAgICAgIHByb2dyYW1baV0gPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgaW5zdGFuY2Uuc3RvcCgpO1xuICAgIHNob3dTZXR0aW5ncyhwcm9ncmFtKTtcbiAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJub3RpZnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5zdGFuY2UiLCJnYW1lcGFkcyIsInVuYW5ub3VuY2VkR2FtZXBhZHMiLCJydW5uaW5nIiwia2V5cyIsInBvbGxHYW1lcGFkcyIsImN1cnJlbnRHYW1lcGFkcyIsIm5hdmlnYXRvciIsImdldEdhbWVwYWRzIiwiZ2FtZXBhZCIsImluZGV4Iiwia2V5IiwiYnV0dG9ucyIsInByZXNzZWQiLCJwcmVzc0tleSIsInJlbGVhc2VLZXkiLCJzYXZlU3RhdGUiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJ3YXJuIiwicHVzaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIk9iamVjdCIsIm1hcCIsInJlZHVjZSIsImFjYyIsInZhbHVlIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJtYXBwaW5nIiwibG9nIiwiaWQiLCJmaWx0ZXIiLCJnIiwibGVuZ3RoIiwibWVzc2FnZSIsIm5vdGlmaWNhdGlvbiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImlubmVyVGV4dCIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJjYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwicmVuZGVyIiwid2lkdGgiLCJoZWlnaHQiLCJieXRlcyIsImltYWdlRGF0YSIsImNyZWF0ZUltYWdlRGF0YSIsImkiLCJkaXNwbGF5T2Zmc2V0Iiwic2lsaWNvbjhPZmZzZXQiLCJkYXRhIiwicHV0SW1hZ2VEYXRhIiwic2V0dGluZ3MiLCJwcm9ncmFtIiwidHlwZSIsInNwZWVkIiwibG9hZFByb2dyYW0iLCJzZXRDeWNsZXNQZXJGcmFtZSIsInN0YXJ0IiwicHJnbSIsImdvIiwiR28iLCJXZWJBc3NlbWJseSIsImluc3RhbnRpYXRlU3RyZWFtaW5nIiwiYXN5bmMiLCJyZXNwIiwiaW1wb3J0T2JqZWN0Iiwic291cmNlIiwiYXJyYXlCdWZmZXIiLCJpbnN0YW50aWF0ZSIsImNvbnN0cnVjdG9yIiwicGxheVNvdW5kIiwic3RvcFNvdW5kIiwiZGlzcGxheSIsInRoaXMiLCJfcnVubmluZyIsIl9zdG9wU291bmQiLCJhc3NpZ24iLCJlbnYiLCJyYW5kb21CeXRlIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicGxheWluZ1BhdHRlcm4iLCJwYXR0ZXJuIiwicGl0Y2giLCJVaW50OEFycmF5IiwiX2NwdSIsIm1lbW9yeSIsImJ1ZmZlciIsImRhdGFQdHIiLCJpbml0IiwiZmV0Y2giLCJ0aGVuIiwicmVzdWx0IiwicnVuIiwiX2ludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbG9ja1RpY2siLCJjYXRjaCIsImVycm9yIiwibmV3Q3ljbGVzIiwicmVzZXQiLCJyYW0iLCJyYW1QdHIiLCJyYW1TaXplIiwiZHVtcFN0YXR1cyIsInN0b3AiLCJjeWNsZXNQZXJGcmFtZSIsImtleUNvZGUiLCJ0b1N0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiYnV0dG9uIiwiZGF0YXNldCIsInBhc3NpdmUiLCJCbGVlcHMiLCJzZXRUb1NvdW5kIiwic2V0Vm9sdW1lIiwic2V0VG9CbGVlcCIsIl9hdWRpb0N0eCIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImF1ZGlvQ29udGV4dCIsIl9vc2NpbGxhdG9yIiwiY3JlYXRlT3NjaWxsYXRvciIsIl9nYWluTm9kZSIsImNyZWF0ZUdhaW4iLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJnYWluIiwiZnJlcXVlbmN5Iiwic2V0UGVyaW9kaWNXYXZlIiwiX3BlcmlvZGljV2F2ZSIsIl9wYXR0ZXJuVG9CaXRzIiwiYml0cyIsIkZsb2F0MzJBcnJheSIsImJ5dGUiLCJtYXNrIiwidmFsIiwic2FtcGxlc1IiLCJzYW1wbGVzSSIsIkZGVHJlc3VsdCIsIl9GRlQiLCJjcmVhdGVQZXJpb2RpY1dhdmUiLCJzbGljZSIsImRpc2FibGVOb3JtYWxpemF0aW9uIiwiUiIsIkkiLCJuIiwiV3IiLCJjb3MiLCJQSSIsIldpIiwic2luIiwiUEVyIiwiUEVpIiwiUE9yIiwiUE9pIiwieiIsInllIiwieW8iLCJ5ZXIiLCJ5ZWkiLCJ5b3IiLCJ5b2kiLCJ5ciIsInlpIiwibSIsInAiLCJxIiwiciIsImEiLCJiIiwiYyIsImQiLCJfaW5zdGFuY2UiLCJBVVRPIiwiVklQIiwiQkxJTkRWSVAiLCJTQ0hJUCIsIlhPQ0hJUCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiQ2xpY2siLCJfaGFuZGxlcnMiLCJfY2FsbEhhbmRsZXIiLCJyZWdpc3RlciIsInNlbGVjdG9yIiwiaGFuZGxlcnMiLCJjbGljayIsIm1vdXNlZG93biIsIm1vdXNldXAiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiaCIsImhhbmRsZXIiLCJkZWZhdWx0UHJldmVudGVkIiwiRmlsZVRhcmdldCIsImRyYWdDbGFzcyIsIl9kcmFnQ2xhc3MiLCJfZHJhZ092ZXIiLCJfZHJhZ0xlYXZlIiwiX2Ryb3AiLCJjYWxsYmFjayIsInMiLCJfb3BlbkZpbGVEaWFsb2ciLCJfaXNEcm9wVGFyZ2V0Iiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJkcm9wRWZmZWN0IiwiX2hhbmRsZUZpbGUiLCJmaWxlcyIsImZpbmQiLCJpbnB1dCIsImNyZWF0ZUVsZW1lbnQiLCJmaWxlIiwiX3JlYWRGaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzRGF0YVVSTCIsIlJvdXRlciIsInJvdXRlcyIsIl9yb3V0ZXMiLCJhZGRSb3V0ZXMiLCJpbnN0YWxsIiwiX2hhbmRsZUNsaWNrIiwiX2hhbmRsZU5hdmlnYXRpb25FdmVudCIsImFkZFJvdXRlIiwicm91dGUiLCJBcnJheSIsImlzQXJyYXkiLCJldm50IiwibWF0Y2giLCJfbWF0Y2hpbmdSb3V0ZSIsInJvdXRlciIsInN1YnBhdGgiLCJtYXRjaGVzIiwibGluayIsImdldEF0dHJpYnV0ZSIsInN0YXJ0c1dpdGgiLCJzdWJzdHIiLCJsb2NhdGlvbiIsImhhc2giLCJfc3ViUm91dGVyTWF0Y2giLCJfc3RyaW5nTWF0Y2giLCJfcmVnRXhwTWF0Y2giLCJSZWdFeHAiLCJUaGltYmxlZnVsIiwic2NvcGUiLCJvcHRpb25zIiwiX3Njb3BlIiwiX29wdGlvbnMiLCJfbm9ybWFsaXplT3B0aW9ucyIsIm9wZW4iLCJjbG9zZSIsInRvZ2dsZSIsImNsYXNzIiwiZ3JvdXAiLCJ0aW1lciIsImZvbGxvd2VyIiwiY2xvc2VTZWxlY3RvciIsIm9wZW5TZWxlY3RvciIsInRvZ2dsZVNlbGVjdG9yIiwiY2xvc2VFbGVtZW50cyIsIm9wZW5FbGVtZW50cyIsIl9jbG9zZSIsIl9vcGVuIiwiZWxlbWVudHMiLCJlbGVtZW50IiwiX2ZvbGxvd2VycyIsIl9ncm91cCIsImRlbGF5IiwidHlwZXMiLCJ3ZWxjb21lUHJvZ3JhbSIsIkVtdWxhdG9yIiwia2V5Ym9hcmQiLCJzaG93U2V0dGluZ3MiLCJuYW1lIiwiYWxlcnQiLCJhdG9iIiwic3BsaXQiLCJBcnJheUJ1ZmZlciIsImNoYXJDb2RlQXQiXSwic291cmNlUm9vdCI6IiJ9